{"version":3,"sources":["../../src/models/userModel.js"],"names":["bcrypt","require","mongoose","Schema","uniqueValidator","userSchema","_isActive","type","Boolean","required","default","_isAccountVerified","pseudo","String","unique","trim","minLength","email","lowercase","validate","validator","test","message","props","value","password","birthdate","Date","create_at","now","bio","profile_image_url","Types","ObjectId","ref","likes","post","followers","following","timestamps","plugin","pre","hashSync","user","model"],"mappings":"AAAA,MAAMA,SAASC,QAAQ,QAAR,CAAf;AACA,MAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,MAAME,SAASD,SAASC,MAAxB;AACA,MAAMC,kBAAkBH,QAAQ,2BAAR,CAAxB;;AAEA,MAAMI,aAAa,IAAIH,SAASC,MAAb,CAAoB;AACnCG,eAAW;AACPC,cAAMC,OADC;AAEPC,kBAAU,IAFH;AAGPC,iBAAS;AAHF,KADwB;AAMnCC,wBAAoB;AAChBJ,cAAMC,OADU;AAEhBC,kBAAU,IAFM;AAGhBC,iBAAS;AAHO,KANe;AAWnCE,YAAQ;AACJL,cAAMM,MADF;AAEJJ,kBAAU,IAFN;AAGJK,gBAAQ,IAHJ;AAIJC,cAAM,IAJF;AAKJC,mBAAW,CAAC,CAAD,EAAI,qBAAJ;AALP,KAX2B;AAkBnCC,WAAO;AACHV,cAAMM,MADH;AAEHJ,kBAAU,IAFP;AAGHK,gBAAQ,IAHL;AAIHC,cAAM,IAJH;AAKHG,mBAAW,IALR;AAMHC,kBAAU;AACNC,uBAAW,UAAUH,KAAV,EAAiB;AACxB,uBAAO,2JAA0JI,IAA1J,CAA+JJ,KAA/J;AAAP;AACH,aAHK;AAINK,qBAASC,SAAU,GAAEA,MAAMC,KAAM;AAJ3B;AANP,KAlB4B;AA+BnCC,cAAU;AACNlB,cAAMM,MADA;AAENJ,kBAAU,IAFJ;AAGNM,cAAM;AAHA,KA/ByB;AAoCnCW,eAAW;AACPnB,cAAMoB;AACN;AAFO,KApCwB;AAwCnCC,eAAW;AACPrB,cAAMoB,IADC;AAEPjB,iBAASiB,KAAKE,GAAL;AAFF,KAxCwB;AA4CnCC,SAAK;AACDvB,cAAMM,MADL;AAEDE,cAAM;AAFL,KA5C8B;AAgDnCgB,uBAAmB;AACfxB,cAAMJ,OAAO6B,KAAP,CAAaC,QADJ;AAEfC,aAAK;AAFU,KAhDgB;AAoDnCC,WAAO,CACH;AACI5B,cAAMJ,OAAO6B,KAAP,CAAaC,QADvB;AAEIC,aAAK;AAFT,KADG,CApD4B;AA0DnCE,UAAK,CACD;AACI7B,cAAMJ,OAAO6B,KAAP,CAAaC,QADvB;AAEIC,aAAK;AAFT,KADC,CA1D8B;AAgEnCG,eAAW,CACP;AACI9B,cAAMJ,OAAO6B,KAAP,CAAaC,QADvB;AAEIC,aAAK;AAFT,KADO,CAhEwB;AAsEnCI,eAAW,CACP;AACI/B,cAAMJ,OAAO6B,KAAP,CAAaC,QADvB;AAEIC,aAAK;AAFT,KADO;AAtEwB,CAApB,EA4EjB;AACEK,gBAAY;AADd,CA5EiB,CAAnB;AA+EAlC,WAAWmC,MAAX,CAAkBpC,eAAlB,EAAmC,EAACkB,SAAS,kBAAV,EAAnC;;AAEAjB,WAAWoC,GAAX,CAAe,MAAf,EAAuB,YAAY;AAC/B,SAAKhB,QAAL,GAAgBzB,OAAO0C,QAAP,CAAgB,KAAKjB,QAArB,EAA+B,EAA/B,CAAhB;AACH,CAFD;;AAIA,MAAMkB,OAAOzC,SAAS0C,KAAT,CAAe,MAAf,EAAuBvC,UAAvB,CAAb;;AAEA,eAAesC,IAAf","file":"userModel.js","sourcesContent":["const bcrypt = require('bcrypt')\nconst mongoose = require('mongoose')\nconst Schema = mongoose.Schema;\nconst uniqueValidator = require(\"mongoose-unique-validator\");\n\nconst userSchema = new mongoose.Schema({\n    _isActive: {\n        type: Boolean,\n        required: true,\n        default: true,\n    },\n    _isAccountVerified: {\n        type: Boolean,\n        required: true,\n        default: false,\n    },\n    pseudo: {\n        type: String,\n        required: true,\n        unique: true,\n        trim: true,\n        minLength: [3, 'pseudo is too short'],\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n        trim: true,\n        lowercase: true,\n        validate: {\n            validator: function (email) {\n                return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email);\n            },\n            message: props => `${props.value} is not a valid email format`\n        },\n    },\n    password: {\n        type: String,\n        required: true,\n        trim: true,\n    },\n    birthdate: {\n        type: Date,\n        //TODO: faire la validation du format Date\n    },\n    create_at: {\n        type: Date,\n        default: Date.now()\n    },\n    bio: {\n        type: String,\n        trim: true,\n    },\n    profile_image_url: {\n        type: Schema.Types.ObjectId,\n        ref: 'Picture'\n    },\n    likes: [\n        {\n            type: Schema.Types.ObjectId,\n            ref: 'Like',\n        },\n    ],\n    post:[\n        {\n            type: Schema.Types.ObjectId,\n            ref: 'Post',\n        },\n    ],\n    followers: [\n        {\n            type: Schema.Types.ObjectId,\n            ref: 'Follow',\n        },\n    ],\n    following: [\n        {\n            type: Schema.Types.ObjectId,\n            ref: 'Follow',\n        },\n    ],\n},{\n    timestamps: true,\n});\nuserSchema.plugin(uniqueValidator, {message: 'is already taken'});\n\nuserSchema.pre('save', function () {\n    this.password = bcrypt.hashSync(this.password, 12);\n});\n\nconst user = mongoose.model('User', userSchema);\n\nexport default user;"]}