{"version":3,"sources":["../../src/models/userModel.js"],"names":["bcrypt","require","mongoose","Schema","uniqueValidator","userSchema","_isActive","type","Boolean","required","_isAccountVerified","pseudo","String","unique","trim","minLength","email","lowercase","validate","validator","test","message","props","value","password","birthdate","Date","create_at","now","bio","profile_image_url","Types","ObjectId","ref","likes","post","followers","following","timestamps","plugin","pre","hashSync","user","model"],"mappings":"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","sourcesContent":["const bcrypt = require('bcrypt')\nconst mongoose = require('mongoose')\nconst Schema = mongoose.Schema;\nconst uniqueValidator = require(\"mongoose-unique-validator\");\n\nconst userSchema = new mongoose.Schema({\n    _isActive: {\n        type: Boolean,\n        required: true,\n        default: true,\n    },\n    _isAccountVerified: {\n        type: Boolean,\n        required: true,\n        default: false,\n    },\n    pseudo: {\n        type: String,\n        required: true,\n        unique: true,\n        trim: true,\n        minLength: [3, 'pseudo is too short'],\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n        trim: true,\n        lowercase: true,\n        validate: {\n            validator: function (email) {\n                return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email);\n            },\n            message: props => `${props.value} is not a valid email format`\n        },\n    },\n    password: {\n        type: String,\n        required: true,\n        trim: true,\n    },\n    birthdate: {\n        type: Date,\n        //TODO: faire la validation du format Date\n    },\n    create_at: {\n        type: Date,\n        default: Date.now()\n    },\n    bio: {\n        type: String,\n        trim: true,\n    },\n    profile_image_url: {\n        type: Schema.Types.ObjectId,\n        ref: 'Picture'\n    },\n    likes: [\n        {\n            type: Schema.Types.ObjectId,\n            ref: 'Like',\n        },\n    ],\n    post:[\n        {\n            type: Schema.Types.ObjectId,\n            ref: 'Post',\n        },\n    ],\n    followers: [\n        {\n            type: Schema.Types.ObjectId,\n            ref: 'Follow',\n        },\n    ],\n    following: [\n        {\n            type: Schema.Types.ObjectId,\n            ref: 'Follow',\n        },\n    ],\n},{\n    timestamps: true,\n});\nuserSchema.plugin(uniqueValidator, {message: 'is already taken'});\n\nuserSchema.pre('save', function () {\n    this.password = bcrypt.hashSync(this.password, 12);\n});\n\nconst user = mongoose.model('User', userSchema);\n\nexport default user;"],"file":"userModel.js"}