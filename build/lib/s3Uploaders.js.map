{"version":3,"sources":["../../src/lib/s3Uploaders.js"],"names":["uuidFilenameTransform","Date","now","Math","random","toFixed","S3Uploader","constructor","s3","config","bucket","uploadParams","concurrencyOptions","_bucket","_s3","_filenameTransform","_uploadParams","_concurrencyOptions","upload","file","baseKey","buffer","Buffer","params","Bucket","Key","Body","ContentType","data","promise","res","key","replace","console","log","err","deleteObject","fileName","module","exports"],"mappings":"AAAA;;;AAGA,SAASA,qBAAT,GAAiC;AAC7B,WAAQ,GAAEC,KAAKC,GAAL,KAAc,CAACC,KAAKC,MAAL,KAAgB,MAAjB,EAAyBC,OAAzB,EAAoC,EAA5D;AACH;;AAED,MAAMC,UAAN,CAAiB;AACbC,gBAAYC,EAAZ,EAAgBC,MAAhB,EAAwBC,MAAxB,EAAgC;AAC5B,cAAM;AACFC,2BAAe,EADb;AAEFC,iCAAqB;;AAFnB,YAIFH,MAJJ;;AAMA,aAAKI,OAAL,GAAeH,MAAf;AACA,aAAKI,GAAL,GAAWN,EAAX;AACA,aAAKO,kBAAL,GAA0Bf,uBAA1B;AACA,aAAKgB,aAAL,GAAqBL,YAArB;AACA,aAAKM,mBAAL,GAA2BL,kBAA3B;AACH;;AAED;;;;AAIA,UAAMM,MAAN,CAAaC,IAAb,EAAmBC,OAAnB,EAA4B;AACxB,cAAMC,SAAS,IAAIC,MAAJ,CAAWH,IAAX,EAAiB,QAAjB,CAAf;;AAEA,cAAMI,SAAS;AACXC,oBAAQ,KAAKX,OADF;AAEXY,iBAAM,GAAEL,OAAQ,IAAG,KAAKL,kBAAmB,EAFhC;AAGXW,kBAAML,MAHK;AAIXM,yBAAa;AAJF,SAAf;;AAOA,YAAI;AACA,gBAAIC,OAAO,MAAM,KAAKd,GAAL,CAASI,MAAT,CAAgBK,MAAhB,EAAwBM,OAAxB,EAAjB;AACA,kBAAMC,MAAMF,KAAKG,GAAL,CAASC,OAAT,CAAiBZ,UAAU,GAA3B,EAAgC,EAAhC,CAAZ;AACAa,oBAAQC,GAAR,CAAYN,IAAZ;AACA,mBAAO,EAACG,KAAKD,GAAN,EAAP;AACH,SALD,CAKE,OAAOK,GAAP,EAAY;AACVF,oBAAQC,GAAR,CAAYC,GAAZ;AACA,mBAAOA,GAAP;AACH;AACJ;;AAED;;;;AAIA,UAAMC,YAAN,CAAmBC,QAAnB,EAA6BjB,OAA7B,EAAsC;;AAElC,cAAMG,SAAS;AACXC,oBAAQ,KAAKX,OADF;AAEXY,iBAAM,GAAEL,OAAQ,IAAGiB,QAAS;AAFjB,SAAf;;AAKA,YAAI;AACA,gBAAIT,OAAO,KAAKd,GAAL,CAASsB,YAAT,CAAsBb,MAAtB,CAAX;AACAU,oBAAQC,GAAR,CAAYN,IAAZ;AACA,mBAAOA,IAAP;AACH,SAJD,CAIE,OAAOO,GAAP,EAAY;AACVF,oBAAQC,GAAR,CAAYC,GAAZ;AACA,mBAAOA,GAAP;AACH;AAEJ;AA5DY;;AA+DjBG,OAAOC,OAAP,GAAiB,EAACjC,UAAD,EAAjB","file":"s3Uploaders.js","sourcesContent":["/**\n * generate filename\n * */\nfunction uuidFilenameTransform() {\n    return `${Date.now() + ((Math.random() * 100000).toFixed())}`;\n}\n\nclass S3Uploader {\n    constructor(s3, config, bucket) {\n        const {\n            uploadParams = {},\n            concurrencyOptions = {},\n\n        } = config;\n\n        this._bucket = bucket\n        this._s3 = s3;\n        this._filenameTransform = uuidFilenameTransform();\n        this._uploadParams = uploadParams;\n        this._concurrencyOptions = concurrencyOptions;\n    }\n\n    /**\n     * @param {string} base64 image\n     * @params {string} basekey AWS folder\n     * */\n    async upload(file, baseKey) {\n        const buffer = new Buffer(file, 'base64');\n\n        const params = {\n            Bucket: this._bucket,\n            Key: `${baseKey}/${this._filenameTransform}`,\n            Body: buffer,\n            ContentType: 'image/jpeg'\n        }\n\n        try {\n            let data = await this._s3.upload(params).promise()\n            const res = data.key.replace(baseKey + '/', \"\");\n            console.log(data)\n            return {key: res}\n        } catch (err) {\n            console.log(err)\n            return err\n        }\n    }\n\n    /**\n     * @param {string} base64 image\n     * @params {string} basekey AWS folder\n     * */\n    async deleteObject(fileName, baseKey) {\n\n        const params = {\n            Bucket: this._bucket,\n            Key: `${baseKey}/${fileName}`\n        };\n\n        try {\n            let data = this._s3.deleteObject(params)\n            console.log(data)\n            return data\n        } catch (err) {\n            console.log(err)\n            return err\n        }\n\n    }\n}\n\nmodule.exports = {S3Uploader};"]}