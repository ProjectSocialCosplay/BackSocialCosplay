{"version":3,"sources":["../../src/lib/s3Uploaders.js"],"names":["uuidFilenameTransform","Date","now","Math","random","toFixed","S3Uploader","s3","config","bucket","uploadParams","concurrencyOptions","_bucket","_s3","_filenameTransform","_uploadParams","_concurrencyOptions","file","baseKey","buffer","Buffer","params","Bucket","Key","Body","ContentType","upload","promise","data","res","key","replace","console","log","fileName","deleteObject","module","exports"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA,SAASA,qBAAT,GAAiC;AAC7B,mBAAUC,IAAI,CAACC,GAAL,KAAc,CAACC,IAAI,CAACC,MAAL,KAAgB,MAAjB,EAAyBC,OAAzB,EAAxB;AACH;;IAEKC,U;AACF,sBAAYC,EAAZ,EAAgBC,MAAhB,EAAwBC,MAAxB,EAAgC;AAAA;AAC5B,+BAIID,MAJJ,CACIE,YADJ;AAAA,QACIA,YADJ,qCACmB,EADnB;AAAA,gCAIIF,MAJJ,CAEIG,kBAFJ;AAAA,QAEIA,kBAFJ,sCAEyB,EAFzB;AAMA,SAAKC,OAAL,GAAeH,MAAf;AACA,SAAKI,GAAL,GAAWN,EAAX;AACA,SAAKO,kBAAL,GAA0Bd,qBAAqB,EAA/C;AACA,SAAKe,aAAL,GAAqBL,YAArB;AACA,SAAKM,mBAAL,GAA2BL,kBAA3B;AACH;AAED;AACJ;AACA;AACA;;;;;;kGACI,iBAAaM,IAAb,EAAmBC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,gBAAAA,MADV,GACmB,IAAIC,MAAJ,CAAWH,IAAX,EAAiB,QAAjB,CADnB;AAGUI,gBAAAA,MAHV,GAGmB;AACXC,kBAAAA,MAAM,EAAE,KAAKV,OADF;AAEXW,kBAAAA,GAAG,YAAKL,OAAL,cAAgB,KAAKJ,kBAArB,CAFQ;AAGXU,kBAAAA,IAAI,EAAEL,MAHK;AAIXM,kBAAAA,WAAW,EAAE;AAJF,iBAHnB;AAAA;AAAA;AAAA,uBAWyB,KAAKZ,GAAL,CAASa,MAAT,CAAgBL,MAAhB,EAAwBM,OAAxB,EAXzB;;AAAA;AAWYC,gBAAAA,IAXZ;AAYcC,gBAAAA,GAZd,GAYoBD,IAAI,CAACE,GAAL,CAASC,OAAT,CAAiBb,OAAO,GAAG,GAA3B,EAAgC,EAAhC,CAZpB;AAaQc,gBAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AAbR,iDAce;AAACE,kBAAAA,GAAG,EAAED;AAAN,iBAdf;;AAAA;AAAA;AAAA;AAgBQG,gBAAAA,OAAO,CAACC,GAAR;AAhBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAqBA;AACJ;AACA;AACA;;;;;wGACI,kBAAmBC,QAAnB,EAA6BhB,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUG,gBAAAA,MAFV,GAEmB;AACXC,kBAAAA,MAAM,EAAE,KAAKV,OADF;AAEXW,kBAAAA,GAAG,YAAKL,OAAL,cAAgBgB,QAAhB;AAFQ,iBAFnB;AAAA;AAQYN,gBAAAA,IARZ,GAQmB,KAAKf,GAAL,CAASsB,YAAT,CAAsBd,MAAtB,CARnB;AASQW,gBAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AATR,kDAUeA,IAVf;;AAAA;AAAA;AAAA;AAYQI,gBAAAA,OAAO,CAACC,GAAR;AAZR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;AAmBJG,MAAM,CAACC,OAAP,GAAiB;AAAC/B,EAAAA,UAAU,EAAVA;AAAD,CAAjB","sourcesContent":["/**\n * generate filename\n * */\nfunction uuidFilenameTransform() {\n    return `${Date.now() + ((Math.random() * 100000).toFixed())}`;\n}\n\nclass S3Uploader {\n    constructor(s3, config, bucket) {\n        const {\n            uploadParams = {},\n            concurrencyOptions = {},\n\n        } = config;\n\n        this._bucket = bucket\n        this._s3 = s3;\n        this._filenameTransform = uuidFilenameTransform();\n        this._uploadParams = uploadParams;\n        this._concurrencyOptions = concurrencyOptions;\n    }\n\n    /**\n     * @param {string} base64 image\n     * @params {string} basekey AWS folder\n     * */\n    async upload(file, baseKey) {\n        const buffer = new Buffer(file, 'base64');\n\n        const params = {\n            Bucket: this._bucket,\n            Key: `${baseKey}/${this._filenameTransform}`,\n            Body: buffer,\n            ContentType: 'image/jpeg'\n        }\n\n        try {\n            let data = await this._s3.upload(params).promise()\n            const res = data.key.replace(baseKey + '/', \"\");\n            console.log(data)\n            return {key: res}\n        } catch (err) {\n            console.log(err)\n            return err\n        }\n    }\n\n    /**\n     * @param {string} base64 image\n     * @params {string} basekey AWS folder\n     * */\n    async deleteObject(fileName, baseKey) {\n\n        const params = {\n            Bucket: this._bucket,\n            Key: `${baseKey}/${fileName}`\n        };\n\n        try {\n            let data = this._s3.deleteObject(params)\n            console.log(data)\n            return data\n        } catch (err) {\n            console.log(err)\n            return err\n        }\n\n    }\n}\n\nmodule.exports = {S3Uploader};"],"file":"s3Uploaders.js"}