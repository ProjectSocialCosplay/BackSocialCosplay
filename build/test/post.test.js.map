{"version":3,"sources":["../../src/test/post.test.js"],"names":["IntegTestDataUserOne","require","post","request","it","done","query","set","send","then","response","res","JSON","parse","text","expect","status","toBe","errors","message","token","data","createPost","content","postId","_id","getPostWithUserId"],"mappings":"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","file":"post.test.js","sourcesContent":["const {IntegTestDataUserOne} = require('./context');\nexport const post = (request) => {\n    it('Create Post not authenticated', async (done) => {\n        const query = ` mutation {\n             createPost(content: \"test\") {\n                        content\n                        author{\n                            email\n                        }\n             }}`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('You are not authenticated');\n                done();\n            });\n    },);\n\n    it('Create Post', async (done) => {\n        const query = ` mutation {\n             createPost(content: \"test\") {\n                        _id\n                        content\n                        author{\n                            email\n                        }\n             }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('token',IntegTestDataUserOne.token)\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.createPost.content).toBe(\"test\");\n                IntegTestDataUserOne.postId = res.data.createPost._id\n                done();\n            });\n    },);\n    it('Create empty post', async (done) => {\n        const query = ` mutation {\n             createPost(content: \"\") {\n                        content\n                        author{\n                            email\n                        }\n             }}`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('token', IntegTestDataUserOne.token)\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('Post validation failed: content: Path `content` is required.');\n                done();\n            });\n    },);\n\n    it('Create space post', async (done) => {\n        const query = ` mutation {\n             createPost(content: \" \") {\n                        content\n                        author{\n                            email\n                        }\n             }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('token', IntegTestDataUserOne.token)\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('Post validation failed: content: Path `content` is required.');\n                done();\n            });\n    },);\n    it('Get post whith post ID', async (done) => {\n        const query = `query {\n             getPost(id: \"${IntegTestDataUserOne.postId}\") {\n                        _id\n                        content\n                        author{\n                            email\n                        }\n             }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('token', IntegTestDataUserOne.token)\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.getPostWithUserId[0].content).toBe('test');\n              //  expect(res.data.getPost[0].content).toBe('test');\n                done(); \n            });\n    },);\n}"]}