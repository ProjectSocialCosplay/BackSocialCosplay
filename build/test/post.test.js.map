{"version":3,"sources":["../../src/test/post.test.js"],"names":["require","IntegTestDataUserOne","post","request","it","done","query","set","send","then","response","res","JSON","parse","text","expect","status","toBe","errors","message","token","data","createPost","content","postId","_id","getPostWithUserId"],"mappings":"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","sourcesContent":["const {IntegTestDataUserOne} = require('./context');\nexport const post = (request) => {\n    it('Create Post not authenticated', async (done) => {\n        const query = ` mutation {\n             createPost(content: \"test\") {\n                        content\n                        author{\n                            email\n                        }\n             }}`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('You are not authenticated');\n                done();\n            });\n    },);\n\n    it('Create Post', async (done) => {\n        const query = ` mutation {\n             createPost(content: \"test\") {\n                        _id\n                        content\n                        author{\n                            email\n                        }\n             }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('token',IntegTestDataUserOne.token)\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.createPost.content).toBe(\"test\");\n                IntegTestDataUserOne.postId = res.data.createPost._id\n                done();\n            });\n    },);\n    it('Create empty post', async (done) => {\n        const query = ` mutation {\n             createPost(content: \"\") {\n                        content\n                        author{\n                            email\n                        }\n             }}`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('token', IntegTestDataUserOne.token)\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('Post validation failed: content: Path `content` is required.');\n                done();\n            });\n    },);\n\n    it('Create space post', async (done) => {\n        const query = ` mutation {\n             createPost(content: \" \") {\n                        content\n                        author{\n                            email\n                        }\n             }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('token', IntegTestDataUserOne.token)\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('Post validation failed: content: Path `content` is required.');\n                done();\n            });\n    },);\n    it('Get post whith post ID', async (done) => {\n        const query = `query {\n             getPost(id: \"${IntegTestDataUserOne.postId}\") {\n                        _id\n                        content\n                        author{\n                            email\n                        }\n             }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('token', IntegTestDataUserOne.token)\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.getPostWithUserId[0].content).toBe('test');\n              //  expect(res.data.getPost[0].content).toBe('test');\n                done(); \n            });\n    },);\n}"],"file":"post.test.js"}