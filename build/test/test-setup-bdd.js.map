{"version":3,"sources":["../../src/test/test-setup-bdd.js"],"names":["mongoose","require","set","promise","global","Promise","db","connectToDb","connect","process","env","DB_URL","useUnifiedTopology","useNewUrlParser","useCreateIndex","catch","err","console","log","dropTestDb","collections","Object","keys","connection","collectionName","collection","drop","error","message","includes","removeAllCollections","deleteMany","closeDbConnection","close","module","exports"],"mappings":"AAAA,MAAMA,WAAWC,QAAQ,UAAR,CAAjB;;AAEAD,SAASE,GAAT,CAAa,gBAAb,EAA+B,IAA/B;AACAF,SAASG,OAAT,GAAmBC,OAAOC,OAA1B;;AAEA,IAAIC,EAAJ;AACA,MAAMC,cAAc,YAAY;AAC5BD,SAAK,MAAMN,SAASQ,OAAT,CAAiBC,QAAQC,GAAR,CAAYC,MAA7B,EAAqC;AAC3CC,4BAAoB,IADuB;AAE3CC,yBAAiB,IAF0B;AAG3CC,wBAAgB;AAH2B,KAArC,EAIRC,KAJQ,CAIFC,OAAOC,QAAQC,GAAR,CAAY,mCAAmCF,GAA/C,CAJL,CAAX;AAKH,CAND;AAOA,MAAMG,aAAa,YAAY;AAC3B,UAAMC,cAAcC,OAAOC,IAAP,CAAYtB,SAASuB,UAAT,CAAoBH,WAAhC,CAApB;AACA,SAAK,MAAMI,cAAX,IAA6BJ,WAA7B,EAA0C;AACtC,cAAMK,aAAazB,SAASuB,UAAT,CAAoBH,WAApB,CAAgCI,cAAhC,CAAnB;AACA,YAAI;AACA,kBAAMC,WAAWC,IAAX,EAAN;AACH,SAFD,CAEE,OAAOC,KAAP,EAAc;AACZ;AACA,gBAAIA,MAAMC,OAAN,KAAkB,cAAtB,EAAsC;AACtC;AACA;AACA,gBAAID,MAAMC,OAAN,CAAcC,QAAd,CAAuB,6CAAvB,CAAJ,EAA2E;AAC3EZ,oBAAQC,GAAR,CAAYS,MAAMC,OAAlB;AACH;AACJ;AACJ,CAfD;AAgBA,MAAOE,uBAAwB,YAAY;AACvC,UAAMV,cAAcC,OAAOC,IAAP,CAAYtB,SAASuB,UAAT,CAAoBH,WAAhC,CAApB;AACA,SAAK,MAAMI,cAAX,IAA6BJ,WAA7B,EAA0C;AACtC,cAAMK,aAAazB,SAASuB,UAAT,CAAoBH,WAApB,CAAgCI,cAAhC,CAAnB;AACA,cAAMC,WAAWM,UAAX,EAAN;AACH;AACJ,CAND;AAOA,MAAMC,oBAAoB,YAAY;AAClC,UAAMhC,SAASuB,UAAT,CAAoBU,KAApB,GAA4BlB,KAA5B,CAAkCY,SAASV,QAAQU,KAAR,CAAcA,KAAd,CAA3C,CAAN;AACA,UAAMrB,GAAG2B,KAAH,EAAN;AACH,CAHD;;AAKAC,OAAOC,OAAP,GAAiB;AACb5B,eADa;AAEbyB,qBAFa;AAGbb,cAHa;AAIbW;AAJa,CAAjB","file":"test-setup-bdd.js","sourcesContent":["const mongoose = require('mongoose')\n\nmongoose.set('useCreateIndex', true)\nmongoose.promise = global.Promise\n\nlet db;\nconst connectToDb = async () => {\n    db = await mongoose.connect(process.env.DB_URL, {\n         useUnifiedTopology: true,\n         useNewUrlParser: true,\n         useCreateIndex: true\n    }).catch(err => console.log('MongoDB error when connecting:' + err));\n}\nconst dropTestDb = async () => {\n    const collections = Object.keys(mongoose.connection.collections)\n    for (const collectionName of collections) {\n        const collection = mongoose.connection.collections[collectionName]\n        try {\n            await collection.drop()\n        } catch (error) {\n            // Sometimes this error happens, but you can safely ignore it\n            if (error.message === 'ns not found') return\n            // This error occurs when you use it\n            // safely ignore this error too\n            if (error.message.includes('a background operation is currently running')) return\n            console.log(error.message)\n        }\n    }\n}\nconst  removeAllCollections =  async () => {\n    const collections = Object.keys(mongoose.connection.collections)\n    for (const collectionName of collections) {\n        const collection = mongoose.connection.collections[collectionName]\n        await collection.deleteMany()\n    }\n}\nconst closeDbConnection = async () => {\n    await mongoose.connection.close().catch(error => console.error(error));\n    await db.close();\n}\n\nmodule.exports = {\n    connectToDb,\n    closeDbConnection,\n    dropTestDb,\n    removeAllCollections\n}"]}