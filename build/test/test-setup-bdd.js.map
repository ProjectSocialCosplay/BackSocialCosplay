{"version":3,"sources":["../../src/test/test-setup-bdd.js"],"names":["mongoose","require","set","promise","global","Promise","db","connectToDb","connect","process","env","DB_URL","useUnifiedTopology","useNewUrlParser","useCreateIndex","err","console","log","dropTestDb","collections","Object","keys","connection","collectionName","collection","drop","message","includes","removeAllCollections","deleteMany","closeDbConnection","close","error","module","exports"],"mappings":"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","sourcesContent":["const mongoose = require('mongoose')\n\nmongoose.set('useCreateIndex', true)\nmongoose.promise = global.Promise\n\nlet db;\nconst connectToDb = async () => {\n    db = await mongoose.connect(process.env.DB_URL, {\n         useUnifiedTopology: true,\n         useNewUrlParser: true,\n         useCreateIndex: true\n    }).catch(err => console.log('MongoDB error when connecting:' + err));\n}\nconst dropTestDb = async () => {\n    const collections = Object.keys(mongoose.connection.collections)\n    for (const collectionName of collections) {\n        const collection = mongoose.connection.collections[collectionName]\n        try {\n            await collection.drop()\n        } catch (error) {\n            // Sometimes this error happens, but you can safely ignore it\n            if (error.message === 'ns not found') return\n            // This error occurs when you use it\n            // safely ignore this error too\n            if (error.message.includes('a background operation is currently running')) return\n            console.log(error.message)\n        }\n    }\n}\nconst  removeAllCollections =  async () => {\n    const collections = Object.keys(mongoose.connection.collections)\n    for (const collectionName of collections) {\n        const collection = mongoose.connection.collections[collectionName]\n        await collection.deleteMany()\n    }\n}\nconst closeDbConnection = async () => {\n    await mongoose.connection.close().catch(error => console.error(error));\n    await db.close();\n}\n\nmodule.exports = {\n    connectToDb,\n    closeDbConnection,\n    dropTestDb,\n    removeAllCollections\n}"],"file":"test-setup-bdd.js"}