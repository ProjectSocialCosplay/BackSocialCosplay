{"version":3,"sources":["../../src/test/comment.test.js"],"names":["IntegTestDataUserOne","require","comment","request","it","done","query","postId","post","set","send","then","response","res","JSON","parse","text","expect","status","toBe","errors","message","token","data","createComment","commentId","_id","getComment"],"mappings":"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","file":"comment.test.js","sourcesContent":["const {IntegTestDataUserOne} = require('./context');\nexport const comment = (request) => {\n\n    it('Create comment not authenticated', async (done) => {\n        const query = ` mutation{\n                          createComment(comment:\"1 comment\" postId:\"${IntegTestDataUserOne.postId}\")\n                          {\n                            comment\n                          }\n                        }`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('You are not authenticated');\n                done();\n            });\n    });\n    it('Creat Comment', async (done) => {\n        const query = ` mutation{\n                          createComment(comment:\"1 comment\" postId:\"${IntegTestDataUserOne.postId}\")\n                          {\n                            _id  \n                            comment\n                            post{\n                              _id content\n                            } \n                            author{\n                              _id\n                              pseudo\n                            }\n                          }\n                        }`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .set('token', IntegTestDataUserOne.token)\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.createComment.comment).toBe(\"1 comment\");\n                IntegTestDataUserOne.commentId = res.data.createComment._id\n                done();\n            });\n    });\n    it('Create more 255 caracter', async (done) => {\n        const query = ` mutation{\n                          createComment(comment:\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus ac\n                                              est egestas, posuere urna eu, blandit sapien. Sed vitae nisi finibus, fermentum dui vel, \n                                              fermentum risus. Maecenas ornare, odio ut commodo bibendum, nulla quam semper eros, at \n                                              pretium qui\" postId:\"${IntegTestDataUserOne.postId}\")\n                          {\n                            _id\n                            comment\n                            post{\n                              _id content\n                            }\n                            author{\n                              _id\n                              pseudo\n                            }\n                          }\n                        }`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .set('token', IntegTestDataUserOne.token)\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe(\"Comment validation failed: comment: Comment is too long\");\n                done();\n            });\n    });\n\n    it('Empty comment', async (done) => {\n        const query = ` mutation{\n                          createComment(comment:\"\" postId:\"${IntegTestDataUserOne.postId}\")\n                          {\n                            _id\n                            comment\n                            post{\n                              _id content\n                            }\n                            author{\n                              _id\n                              pseudo\n                            }\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .set('token', IntegTestDataUserOne.token)\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe(\"Comment validation failed: comment: Path `comment` is required.\");\n                done();\n            });\n    });\n    it('Empty comment with space charter', async (done) => {\n        const query = ` mutation{\n                          createComment(comment:\"\" postId:\"${IntegTestDataUserOne.postId}\")\n                          {\n                            _id\n                            comment\n                            post{\n                              _id content\n                            }\n                            author{\n                              _id\n                              pseudo\n                            }\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .set('token', IntegTestDataUserOne.token)\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe(\"Comment validation failed: comment: Path `comment` is required.\");\n                done();\n            });\n    });\n\n    it('get Comment', async (done) => {\n        const query = ` query{\n                          getComment(id:\"${IntegTestDataUserOne.commentId}\")\n                          {\n                            _id  \n                            comment\n                            post {\n                              _id content\n                            } \n                            author{\n                              _id\n                              pseudo\n                            }\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .set('token', IntegTestDataUserOne.token)\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.getComment[0].comment).toBe('1 comment');\n                done();\n            });\n    });\n}"]}