{"version":3,"sources":["../../src/test/comment.test.js"],"names":["require","IntegTestDataUserOne","comment","request","it","done","query","postId","post","set","send","then","response","res","JSON","parse","text","expect","status","toBe","errors","message","token","data","createComment","commentId","_id","getComment"],"mappings":"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","sourcesContent":["const {IntegTestDataUserOne} = require('./context');\nexport const comment = (request) => {\n\n    it('Create comment not authenticated', async (done) => {\n        const query = ` mutation{\n                          createComment(comment:\"1 comment\" postId:\"${IntegTestDataUserOne.postId}\")\n                          {\n                            comment\n                          }\n                        }`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('You are not authenticated');\n                done();\n            });\n    });\n    it('Creat Comment', async (done) => {\n        const query = ` mutation{\n                          createComment(comment:\"1 comment\" postId:\"${IntegTestDataUserOne.postId}\")\n                          {\n                            _id  \n                            comment\n                            post{\n                              _id content\n                            } \n                            author{\n                              _id\n                              pseudo\n                            }\n                          }\n                        }`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .set('token', IntegTestDataUserOne.token)\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.createComment.comment).toBe(\"1 comment\");\n                IntegTestDataUserOne.commentId = res.data.createComment._id\n                done();\n            });\n    });\n    it('Create more 255 caracter', async (done) => {\n        const query = ` mutation{\n                          createComment(comment:\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus ac\n                                              est egestas, posuere urna eu, blandit sapien. Sed vitae nisi finibus, fermentum dui vel, \n                                              fermentum risus. Maecenas ornare, odio ut commodo bibendum, nulla quam semper eros, at \n                                              pretium qui\" postId:\"${IntegTestDataUserOne.postId}\")\n                          {\n                            _id\n                            comment\n                            post{\n                              _id content\n                            }\n                            author{\n                              _id\n                              pseudo\n                            }\n                          }\n                        }`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .set('token', IntegTestDataUserOne.token)\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe(\"Comment validation failed: comment: Comment is too long\");\n                done();\n            });\n    });\n\n    it('Empty comment', async (done) => {\n        const query = ` mutation{\n                          createComment(comment:\"\" postId:\"${IntegTestDataUserOne.postId}\")\n                          {\n                            _id\n                            comment\n                            post{\n                              _id content\n                            }\n                            author{\n                              _id\n                              pseudo\n                            }\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .set('token', IntegTestDataUserOne.token)\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe(\"Comment validation failed: comment: Path `comment` is required.\");\n                done();\n            });\n    });\n    it('Empty comment with space charter', async (done) => {\n        const query = ` mutation{\n                          createComment(comment:\"\" postId:\"${IntegTestDataUserOne.postId}\")\n                          {\n                            _id\n                            comment\n                            post{\n                              _id content\n                            }\n                            author{\n                              _id\n                              pseudo\n                            }\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .set('token', IntegTestDataUserOne.token)\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe(\"Comment validation failed: comment: Path `comment` is required.\");\n                done();\n            });\n    });\n\n    it('get Comment', async (done) => {\n        const query = ` query{\n                          getComment(id:\"${IntegTestDataUserOne.commentId}\")\n                          {\n                            _id  \n                            comment\n                            post {\n                              _id content\n                            } \n                            author{\n                              _id\n                              pseudo\n                            }\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .set('token', IntegTestDataUserOne.token)\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.getComment[0].comment).toBe('1 comment');\n                done();\n            });\n    });\n}"],"file":"comment.test.js"}