{"version":3,"sources":["../../src/test/auth.test.js"],"names":["require","IntegTestDataUserOne","userRegister","request","it","done","post","set","send","query","then","response","res","JSON","parse","text","expect","status","toBe","errors","message","data","createUser","pseudo","email","_id","userAuth","token","not","toBeNull","login","user_id","updateUser"],"mappings":"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","sourcesContent":["const {IntegTestDataUserOne} = require('./context');\n\nexport const userRegister = (request) => {\n    it('insert user with empty pseudo', async (done) => {\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            //.send({query})\n            .send({\n                query: \"mutation  { createUser ( password: \\\"test\\\", email: \\\"tt@gmail.com\\\", birthdate: \\\"1930-11-12\\\" ) { pseudo email _id }}\"\n            })\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(400)\n                expect(res.errors[0].message).toBe('Field \"createUser\" argument \"pseudo\" of type \"String!\" is required, but it was not provided.');\n                done();\n            });\n    },);\n    it('insert user with empty email', async (done) => {\n        const query = ` mutation {\n             createUser(pseudo: \"ttt\", password: \"test\", birthdate: \"1930-11-12\" ) {\n                        pseudo\n                        email\n                        _id\n                        }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(400)\n                expect(res.errors[0].message).toBe('Field \"createUser\" argument \"email\" of type \"String!\" is required, but it was not provided.');\n                done();\n            });\n    },);\n    it('insert user with empty password', async (done) => {\n        const query = ` mutation {\n             createUser(pseudo: \"ttt\", email: \"tt@gmail.com\", birthdate: \"1930-11-12\") {\n                        pseudo\n                        email\n                        _id\n                        }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(400)\n                expect(res.errors[0].message).toBe('Field \"createUser\" argument \"password\" of type \"String!\" is required, but it was not provided.');\n                done();\n            });\n    },);\n    it('insert user with wrong email format', async (done) => {\n        const query = ` mutation {\n             createUser(pseudo: \"ttt\", password: \"test\", email: \"testgmail.com\", birthdate: \"1930-11-12\") {\n                        pseudo\n                        email\n                        _id\n                        }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('User validation failed: email: testgmail.com is not a valid email format');\n                done();\n            });\n    },);\n    it('insert user with wrong email format', async (done) => {\n        const query = ` mutation {\n             createUser(pseudo: \"ttt\", password: \"test\", email: \"test@gmail\", birthdate: \"1930-11-12\") {\n                        pseudo\n                        email\n                        _id\n                        }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('User validation failed: email: test@gmail is not a valid email format');\n                done();\n            });\n    },);\n    it('insert user with wrong email format', async (done) => {\n        const query = ` mutation {\n             createUser(pseudo: \"ttt\", password: \"test\", email: \"@gmail.com\", birthdate: \"1930-11-12\") {\n                        pseudo\n                        email\n                        _id\n                        }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('User validation failed: email: @gmail.com is not a valid email format');\n                done();\n            });\n    },);\n    it('insert user one', async (done) => {\n        const query = ` mutation {\n             createUser( pseudo: \"ttt\", password: \"test\", email: \"test@gmail.com\", birthdate: \"1930-11-12\" ) {\n                        pseudo\n                        email\n                        _id\n                        }}`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.createUser.pseudo).toBe(\"ttt\");\n                expect(res.data.createUser.email).toBe(\"test@gmail.com\");\n                IntegTestDataUserOne._id = res.data.createUser._id\n                done();\n            });\n    },);\n    it('email is already use', async (done) => {\n        const query = ` mutation {\n             createUser( pseudo: \"ttt\", password: \"test\", email: \"test@gmail.com\", birthdate: \"1930-11-12\" ) {\n                        pseudo\n                        email\n                        _id\n                        }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe(\"User validation failed: pseudo: is already taken, email: is already taken\");\n                done();\n            });\n    })\n}\nexport const userAuth = (request) => {\n\n    it('Authentication Email Error', async (done) => {\n        const query = ` query {\n                            login( password: \"test\", email: \"testgmail.com\") {\n                               token\n                            }}`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('Invalid credentials')\n                done();\n            });\n    },);\n    it('Authentication empty password', async (done) => {\n        const query = `query {\n                            login( password: \"\", email: \"test@gmail.com\") {\n                               token\n                            }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('Invalid credentials')\n                done();\n            });\n    },);\n    it('Authentication wrong password', async (done) => {\n        const query = `query {\n                            login( password: \"sdgsdhgs\", email: \"test@gmail.com\") {\n                               token\n                            }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('Invalid credentials')\n                done();\n            });\n    },);\n    it('Authentication wrong email', async (done) => {\n        const query = ` query {\n                            login( password: \"test\", email: \"testwrong@gmail.com\") {\n                               token\n                            }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('Invalid credentials')\n                done();\n            });\n    },);\n    //TODO fonction confirmation email\n    it('unconfirmed authentication', async (done) => {\n\n        const query = ` query {\n                            login( password: \"test\", email: \"test@gmail.com\") {\n                               token\n                            }}`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(query => {\n                let res = JSON.parse(query.text)\n                //let res = JSON.parse(query.text)\n                //expect(query.status).toBe(200)\n                //TODO Rendre fonctionnel ce teste\n                //expect(res.errors[0].message).toBe(\"Account not confirmed\")\n                done();\n            });\n    },);\n    it('authentication', async (done) => {\n\n        const query = ` query {\n                            login( password: \"test\", email: \"test@gmail.com\") {\n                               token\n                            }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(query => {\n                let res = JSON.parse(query.text)\n                //expect(query.status).toBe(200) TODO: Voir pourquoi c'est une 400\n                expect(res.data.token).not.toBeNull();\n                IntegTestDataUserOne.token = res.data.login.token\n                expect(IntegTestDataUserOne.token).not.toBeNull();\n                done();\n            });\n    },);\n    it('update user', async (done) => {\n            const query = ` mutation {\n                 updateUser( pseudo: \"linda\", email: \"linda@gmail.com\", birthdate: \"1988-11-12\" ) {\n                            pseudo\n                            email\n                            _id\n                            }}`;\n\n            request\n                .post('/graphql')\n                .set('Content-Type', 'application/json')\n                .set('Accept', '*/*')\n                .set('token', IntegTestDataUserOne.token)\n                .send({query})\n                .then(response => {\n                    let res = JSON.parse(response.text)\n                    IntegTestDataUserOne.user_id = res.data.updateUser._id\n                    expect(response.status).toBe(200)\n                    expect(res.data.updateUser.pseudo).toBe(\"linda\");\n                    expect(res.data.updateUser.email).toBe(\"linda@gmail.com\");\n                    done();\n                });\n        },);\n}"],"file":"auth.test.js"}