{"version":3,"sources":["../../src/test/auth.test.js"],"names":["IntegTestDataUserOne","require","userRegister","request","it","done","post","set","send","query","then","response","res","JSON","parse","text","expect","status","toBe","errors","message","data","createUser","pseudo","email","_id","userAuth","token","not","toBeNull","login","user_id","updateUser"],"mappings":"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","file":"auth.test.js","sourcesContent":["const {IntegTestDataUserOne} = require('./context');\n\nexport const userRegister = (request) => {\n    it('insert user with empty pseudo', async (done) => {\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            //.send({query})\n            .send({\n                query: \"mutation  { createUser ( password: \\\"test\\\", email: \\\"tt@gmail.com\\\", birthdate: \\\"1930-11-12\\\" ) { pseudo email _id }}\"\n            })\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(400)\n                expect(res.errors[0].message).toBe('Field \"createUser\" argument \"pseudo\" of type \"String!\" is required, but it was not provided.');\n                done();\n            });\n    },);\n    it('insert user with empty email', async (done) => {\n        const query = ` mutation {\n             createUser(pseudo: \"ttt\", password: \"test\", birthdate: \"1930-11-12\" ) {\n                        pseudo\n                        email\n                        _id\n                        }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(400)\n                expect(res.errors[0].message).toBe('Field \"createUser\" argument \"email\" of type \"String!\" is required, but it was not provided.');\n                done();\n            });\n    },);\n    it('insert user with empty password', async (done) => {\n        const query = ` mutation {\n             createUser(pseudo: \"ttt\", email: \"tt@gmail.com\", birthdate: \"1930-11-12\") {\n                        pseudo\n                        email\n                        _id\n                        }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(400)\n                expect(res.errors[0].message).toBe('Field \"createUser\" argument \"password\" of type \"String!\" is required, but it was not provided.');\n                done();\n            });\n    },);\n    it('insert user with wrong email format', async (done) => {\n        const query = ` mutation {\n             createUser(pseudo: \"ttt\", password: \"test\", email: \"testgmail.com\", birthdate: \"1930-11-12\") {\n                        pseudo\n                        email\n                        _id\n                        }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('User validation failed: email: testgmail.com is not a valid email format');\n                done();\n            });\n    },);\n    it('insert user with wrong email format', async (done) => {\n        const query = ` mutation {\n             createUser(pseudo: \"ttt\", password: \"test\", email: \"test@gmail\", birthdate: \"1930-11-12\") {\n                        pseudo\n                        email\n                        _id\n                        }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('User validation failed: email: test@gmail is not a valid email format');\n                done();\n            });\n    },);\n    it('insert user with wrong email format', async (done) => {\n        const query = ` mutation {\n             createUser(pseudo: \"ttt\", password: \"test\", email: \"@gmail.com\", birthdate: \"1930-11-12\") {\n                        pseudo\n                        email\n                        _id\n                        }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('User validation failed: email: @gmail.com is not a valid email format');\n                done();\n            });\n    },);\n    it('insert user one', async (done) => {\n        const query = ` mutation {\n             createUser( pseudo: \"ttt\", password: \"test\", email: \"test@gmail.com\", birthdate: \"1930-11-12\" ) {\n                        pseudo\n                        email\n                        _id\n                        }}`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.createUser.pseudo).toBe(\"ttt\");\n                expect(res.data.createUser.email).toBe(\"test@gmail.com\");\n                IntegTestDataUserOne._id = res.data.createUser._id\n                done();\n            });\n    },);\n    it('email is already use', async (done) => {\n        const query = ` mutation {\n             createUser( pseudo: \"ttt\", password: \"test\", email: \"test@gmail.com\", birthdate: \"1930-11-12\" ) {\n                        pseudo\n                        email\n                        _id\n                        }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe(\"User validation failed: pseudo: is already taken, email: is already taken\");\n                done();\n            });\n    })\n}\nexport const userAuth = (request) => {\n\n    it('Authentication Email Error', async (done) => {\n        const query = ` query {\n                            login( password: \"test\", email: \"testgmail.com\") {\n                               token\n                            }}`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('Invalid credentials')\n                done();\n            });\n    },);\n    it('Authentication empty password', async (done) => {\n        const query = `query {\n                            login( password: \"\", email: \"test@gmail.com\") {\n                               token\n                            }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('Invalid credentials')\n                done();\n            });\n    },);\n    it('Authentication wrong password', async (done) => {\n        const query = `query {\n                            login( password: \"sdgsdhgs\", email: \"test@gmail.com\") {\n                               token\n                            }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('Invalid credentials')\n                done();\n            });\n    },);\n    it('Authentication wrong email', async (done) => {\n        const query = ` query {\n                            login( password: \"test\", email: \"testwrong@gmail.com\") {\n                               token\n                            }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('Invalid credentials')\n                done();\n            });\n    },);\n    //TODO fonction confirmation email\n    it('unconfirmed authentication', async (done) => {\n\n        const query = ` query {\n                            login( password: \"test\", email: \"test@gmail.com\") {\n                               token\n                            }}`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(query => {\n                let res = JSON.parse(query.text)\n                //let res = JSON.parse(query.text)\n                //expect(query.status).toBe(200)\n                //TODO Rendre fonctionnel ce teste\n                //expect(res.errors[0].message).toBe(\"Account not confirmed\")\n                done();\n            });\n    },);\n    it('authentication', async (done) => {\n\n        const query = ` query {\n                            login( password: \"test\", email: \"test@gmail.com\") {\n                               token\n                            }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(query => {\n                let res = JSON.parse(query.text)\n                //expect(query.status).toBe(200) TODO: Voir pourquoi c'est une 400\n                expect(res.data.token).not.toBeNull();\n                IntegTestDataUserOne.token = res.data.login.token\n                expect(IntegTestDataUserOne.token).not.toBeNull();\n                done();\n            });\n    },);\n    it('update user', async (done) => {\n            const query = ` mutation {\n                 updateUser( pseudo: \"linda\", email: \"linda@gmail.com\", birthdate: \"1988-11-12\" ) {\n                            pseudo\n                            email\n                            _id\n                            }}`;\n\n            request\n                .post('/graphql')\n                .set('Content-Type', 'application/json')\n                .set('Accept', '*/*')\n                .set('token', IntegTestDataUserOne.token)\n                .send({query})\n                .then(response => {\n                    let res = JSON.parse(response.text)\n                    IntegTestDataUserOne.user_id = res.data.updateUser._id\n                    expect(response.status).toBe(200)\n                    expect(res.data.updateUser.pseudo).toBe(\"linda\");\n                    expect(res.data.updateUser.email).toBe(\"linda@gmail.com\");\n                    done();\n                });\n        },);\n}"]}