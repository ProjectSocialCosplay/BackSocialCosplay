{"version":3,"sources":["../../src/test/follow.test.js"],"names":["require","IntegTestDataUserOne","IntegTestDataUserTwo","follow","request","it","done","query","post","set","send","then","response","res","JSON","parse","text","expect","status","toBe","data","createUser","pseudo","email","_id","token","not","toBeNull","login","console","log","createFollow","user","following","follower","followers"],"mappings":"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","sourcesContent":["const {IntegTestDataUserOne, IntegTestDataUserTwo} = require('./context');\nexport const follow = (request) => {\n    it('create user two', async (done) => {\n        const query = ` mutation {\n                 createUser( pseudo: \"user2\", password: \"user2\", email: \"user2@gmail.com\", birthdate: \"1930-11-12\" ) {\n                            pseudo\n                            email\n                            _id\n                            }}`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.createUser.pseudo).toBe(\"user2\");\n                expect(res.data.createUser.email).toBe(\"user2@gmail.com\");\n                IntegTestDataUserTwo._id = res.data.createUser._id\n                done();\n            });\n    },);\n    it('authentication user two', async (done) => {\n\n        const query = ` query {\n                            login( password: \"user2\", email: \"user2@gmail.com\") {\n                               token\n                            }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(query => {\n                let res = JSON.parse(query.text)\n                //expect(query.status).toBe(200) TODO: Voir pourquoi c'est une 400\n                expect(res.data.token).not.toBeNull();\n                IntegTestDataUserTwo.token = res.data.login.token\n                expect(IntegTestDataUserTwo.token).not.toBeNull();\n                done();\n            });\n    },);\n    it('user on follow user2', async (done) => {\n        const query = ` mutation{\n                          createFollow(followerId:\"${IntegTestDataUserTwo._id}\")\n                          {\n                            _id\n                            user {\n                                 _id\n                                 pseudo\n                            }\n                            following {\n                                _id\n                                pseudo\n                            }\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('token', IntegTestDataUserOne.token)\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                console.log(res)\n                expect(res.data.createFollow.user._id).toBe(IntegTestDataUserOne._id);\n                expect(res.data.createFollow.following._id).toBe(IntegTestDataUserTwo._id);\n                //  expect(res.errors[0].message).toBe('You are not authenticated');\n                done();\n            });\n    });\n    it('userTwo follow userOne', async (done) => {\n        const query = ` mutation{\n                          createFollow(followerId:\"${IntegTestDataUserOne._id}\")\n                          {\n                            _id\n                            user {\n                                 _id\n                                 pseudo\n                            }\n                            following {\n                                _id\n                                pseudo\n                            }\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('token', IntegTestDataUserTwo.token)\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.createFollow.user._id).toBe(IntegTestDataUserTwo._id);\n                expect(res.data.createFollow.follower._id).toBe(IntegTestDataUserOne._id);\n                //  expect(res.errors[0].message).toBe('You are not authenticated');\n                done();\n            });\n    });\n\n    it('Get Follower from user', async (done) => {\n        const query = ` query{\n                          user(id:\"${IntegTestDataUserOne._id}\")\n                          {\n                            _id\n                            pseudo\n                            followers {\n                                _id\n                                user {\n                                    _id\n                                    pseudo\n                                }\n                                following{\n                                    _id\n                                    pseudo\n                                }\n                            }\n                            following{\n                                _id\n                                user {\n                                    _id\n                                    pseudo\n                                }\n                                following{\n                                    _id\n                                    pseudo\n                                }\n                            }\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('token', IntegTestDataUserOne.token)\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                console.log(res)\n                expect(res.data.user.followers[0].user._id).toBe(IntegTestDataUserOne._id);\n                expect(res.data.user.following[0].user._id).toBe(IntegTestDataUserTwo._id);\n                //  expect(res.errors[0].message).toBe('You are not authenticated');\n                done();\n            });\n    });\n}"],"file":"follow.test.js"}