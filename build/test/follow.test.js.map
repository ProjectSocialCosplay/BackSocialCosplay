{"version":3,"sources":["../../src/test/follow.test.js"],"names":["IntegTestDataUserOne","IntegTestDataUserTwo","require","follow","request","it","done","query","post","set","send","then","response","res","JSON","parse","text","expect","status","toBe","data","createUser","pseudo","email","_id","token","not","toBeNull","login","console","log","createFollow","user","following","follower","followers"],"mappings":"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","file":"follow.test.js","sourcesContent":["const {IntegTestDataUserOne, IntegTestDataUserTwo} = require('./context');\nexport const follow = (request) => {\n    it('create user two', async (done) => {\n        const query = ` mutation {\n                 createUser( pseudo: \"user2\", password: \"user2\", email: \"user2@gmail.com\", birthdate: \"1930-11-12\" ) {\n                            pseudo\n                            email\n                            _id\n                            }}`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.createUser.pseudo).toBe(\"user2\");\n                expect(res.data.createUser.email).toBe(\"user2@gmail.com\");\n                IntegTestDataUserTwo._id = res.data.createUser._id\n                done();\n            });\n    },);\n    it('authentication user two', async (done) => {\n\n        const query = ` query {\n                            login( password: \"user2\", email: \"user2@gmail.com\") {\n                               token\n                            }}`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(query => {\n                let res = JSON.parse(query.text)\n                //expect(query.status).toBe(200) TODO: Voir pourquoi c'est une 400\n                expect(res.data.token).not.toBeNull();\n                IntegTestDataUserTwo.token = res.data.login.token\n                expect(IntegTestDataUserTwo.token).not.toBeNull();\n                done();\n            });\n    },);\n    it('user on follow user2', async (done) => {\n        const query = ` mutation{\n                          createFollow(followerId:\"${IntegTestDataUserTwo._id}\")\n                          {\n                            _id\n                            user {\n                                 _id\n                                 pseudo\n                            }\n                            following {\n                                _id\n                                pseudo\n                            }\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('token', IntegTestDataUserOne.token)\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                console.log(res)\n                expect(res.data.createFollow.user._id).toBe(IntegTestDataUserOne._id);\n                expect(res.data.createFollow.following._id).toBe(IntegTestDataUserTwo._id);\n                //  expect(res.errors[0].message).toBe('You are not authenticated');\n                done();\n            });\n    });\n    it('userTwo follow userOne', async (done) => {\n        const query = ` mutation{\n                          createFollow(followerId:\"${IntegTestDataUserOne._id}\")\n                          {\n                            _id\n                            user {\n                                 _id\n                                 pseudo\n                            }\n                            following {\n                                _id\n                                pseudo\n                            }\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('token', IntegTestDataUserTwo.token)\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.createFollow.user._id).toBe(IntegTestDataUserTwo._id);\n                expect(res.data.createFollow.follower._id).toBe(IntegTestDataUserOne._id);\n                //  expect(res.errors[0].message).toBe('You are not authenticated');\n                done();\n            });\n    });\n\n    it('Get Follower from user', async (done) => {\n        const query = ` query{\n                          user(id:\"${IntegTestDataUserOne._id}\")\n                          {\n                            _id\n                            pseudo\n                            followers {\n                                _id\n                                user {\n                                    _id\n                                    pseudo\n                                }\n                                following{\n                                    _id\n                                    pseudo\n                                }\n                            }\n                            following{\n                                _id\n                                user {\n                                    _id\n                                    pseudo\n                                }\n                                following{\n                                    _id\n                                    pseudo\n                                }\n                            }\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('token', IntegTestDataUserOne.token)\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                console.log(res)\n                expect(res.data.user.followers[0].user._id).toBe(IntegTestDataUserOne._id);\n                expect(res.data.user.following[0].user._id).toBe(IntegTestDataUserTwo._id);\n                //  expect(res.errors[0].message).toBe('You are not authenticated');\n                done();\n            });\n    });\n}"]}