{"version":3,"sources":["../../src/test/like.test.js"],"names":["IntegTestDataUserOne","require","like","request","it","done","query","postId","post","set","send","then","response","res","JSON","parse","text","expect","status","toBe","errors","message","token","data","createLike","_id","author","likes","likeId","deleteLike"],"mappings":"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","file":"like.test.js","sourcesContent":["const {IntegTestDataUserOne} = require('./context');\n\nexport const like = (request) => {\n\n    it('like not authenticated', async (done) => {\n        const query = ` mutation{\n                          createLike(postId:\"${IntegTestDataUserOne.postId}\")\n                          {    \n                              _id\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('You are not authenticated');\n                done();\n            });\n    });\n    it('deleteLike not authenticated', async (done) => {\n        const query = ` mutation{\n                          deleteLike(postId:\"${IntegTestDataUserOne.postId}\")\n                          {    \n                              _id\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('You are not authenticated');\n                done();\n            });\n    });\n    it('Like post', async (done) => {\n\n        const query = ` mutation{\n                          createLike(postId:\"${IntegTestDataUserOne.postId}\")\n                          {    \n                              _id\n                              author{\n                                  _id\n                                 email\n                                 likes{\n                                    _id\n                                 }\n                              }\n                              post{\n                                likes{\n                                    _id\n                                }\n                              }\n                          }\n                        }`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .set('token', IntegTestDataUserOne.token)\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.createLike._id).toBe(res.data.createLike.author.likes[0]._id)\n                expect(res.data.createLike.author._id).toBe(IntegTestDataUserOne._id)\n                expect(res.data.createLike._id).toBe(res.data.createLike.post.likes[0]._id)\n                IntegTestDataUserOne.likeId = res.data.createLike._id\n                done();\n            });\n    });\n\n    it('deleteLike', async (done) => {\n        const query = `mutation{ deleteLike(postId:\"${IntegTestDataUserOne.postId}\"){\n                        author{\n                          _id\n                        email\n                        }\n                        post{_id}\n                      } }`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .set('token', IntegTestDataUserOne.token)\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.deleteLike.author._id).toBe(IntegTestDataUserOne._id)\n                expect(res.data.deleteLike.post._id).toBe(IntegTestDataUserOne.postId)\n                done();\n            });\n    });\n}"]}