{"version":3,"sources":["../../src/test/like.test.js"],"names":["require","IntegTestDataUserOne","like","request","it","done","query","postId","post","set","send","then","response","res","JSON","parse","text","expect","status","toBe","errors","message","token","data","createLike","_id","author","likes","likeId","deleteLike"],"mappings":"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","sourcesContent":["const {IntegTestDataUserOne} = require('./context');\n\nexport const like = (request) => {\n\n    it('like not authenticated', async (done) => {\n        const query = ` mutation{\n                          createLike(postId:\"${IntegTestDataUserOne.postId}\")\n                          {    \n                              _id\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('You are not authenticated');\n                done();\n            });\n    });\n    it('deleteLike not authenticated', async (done) => {\n        const query = ` mutation{\n                          deleteLike(postId:\"${IntegTestDataUserOne.postId}\")\n                          {    \n                              _id\n                          }\n                        }`;\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.errors[0].message).toBe('You are not authenticated');\n                done();\n            });\n    });\n    it('Like post', async (done) => {\n\n        const query = ` mutation{\n                          createLike(postId:\"${IntegTestDataUserOne.postId}\")\n                          {    \n                              _id\n                              author{\n                                  _id\n                                 email\n                                 likes{\n                                    _id\n                                 }\n                              }\n                              post{\n                                likes{\n                                    _id\n                                }\n                              }\n                          }\n                        }`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .set('token', IntegTestDataUserOne.token)\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.createLike._id).toBe(res.data.createLike.author.likes[0]._id)\n                expect(res.data.createLike.author._id).toBe(IntegTestDataUserOne._id)\n                expect(res.data.createLike._id).toBe(res.data.createLike.post.likes[0]._id)\n                IntegTestDataUserOne.likeId = res.data.createLike._id\n                done();\n            });\n    });\n\n    it('deleteLike', async (done) => {\n        const query = `mutation{ deleteLike(postId:\"${IntegTestDataUserOne.postId}\"){\n                        author{\n                          _id\n                        email\n                        }\n                        post{_id}\n                      } }`;\n\n        request\n            .post('/graphql')\n            .set('Content-Type', 'application/json')\n            .set('Accept', '*/*')\n            .set('token', IntegTestDataUserOne.token)\n            .send({query})\n            .then(response => {\n                let res = JSON.parse(response.text)\n                expect(response.status).toBe(200)\n                expect(res.data.deleteLike.author._id).toBe(IntegTestDataUserOne._id)\n                expect(res.data.deleteLike.post._id).toBe(IntegTestDataUserOne.postId)\n                done();\n            });\n    });\n}"],"file":"like.test.js"}