{"version":3,"sources":["../../src/resolvers/userResolvers.js"],"names":["Query","user","parent","info","id","userModel","models","userInfo","AuthenticationError","findById","_id","exec","getAuthUser","login","email","password","findOne","matchPasswords","bcrypt","compareSync","token","jwt","genarateToken","searchUsers","searchQuery","find","$or","pseudo","RegExp","$ne","limit","Mutation","createUser","birthdate","create","updateUser","findOneAndUpdate","err","result","Error","testUpdate","User","posts","args","postModel","author","comment","commentModel","profile_image","pictureModel","profile_image_url","data","url","process","env","BUCKETNAME","key","followers","followModel","follower","following","feed","sort","createdAt","res","length","$in","concat","a","b"],"mappings":"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","sourcesContent":["import {AuthenticationError} from 'apollo-server-express'\nimport bcrypt from \"bcrypt\"\nimport jwt from \"../utils/jwt\"\n\nexport default {\n    Query: {\n        user: async (parent, {id}, {models: {userModel}, userInfo}, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            return await userModel.findById({_id: id}).exec()\n        },\n        getAuthUser: async (parent, {id}, {models: {userModel}, userInfo}, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            return await userModel.findById({_id: userInfo._id}).exec()\n        },\n\n        login: async (parent, {email, password}, {models: {userModel}}, info) => {\n            const user = await userModel.findOne({email}).exec();\n            if (!user) {\n                throw new AuthenticationError('Invalid credentials');\n            }\n            const matchPasswords = bcrypt.compareSync(password, user.password);\n            if (!matchPasswords) {\n                throw new AuthenticationError('Invalid credentials');\n            }\n            /*\n            if(!user._isAccountVerified){\n                throw new AuthenticationError('Account not confirmed');\n            }*/\n            const token = jwt.genarateToken(user._id)\n            return {\n                token\n            };\n        },\n        searchUsers: async (parent, { searchQuery }, { models: {userModel},userInfo}) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            if (!searchQuery) {\n                return [];\n            }\n            return userModel.find({\n                $or: [{pseudo: new RegExp(searchQuery, 'i')}],\n                _id: {\n                    $ne: userInfo._id,\n                },\n            }).limit(50);\n        },\n    },\n    Mutation: {\n        createUser: async (parent, {pseudo, email, password, birthdate}, {models: {userModel}}, info) => {\n            return await userModel.create({pseudo, email, password, birthdate});\n        },\n        updateUser: async (parent, {pseudo, email, birthdate}, {models: {userModel}, userInfo}, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            let testUpdate = await userModel.findOneAndUpdate({_id: userInfo._id}, {\n                    pseudo: pseudo,\n                    email: email,\n                    birthdate: birthdate\n                },\n                (err, result) => {\n                    if (err) {\n                        throw new Error(\"User not updated\")\n                    } else {\n                        return (result)\n                    }\n                })\n            return testUpdate;\n        },\n    },\n    User: {\n        posts: async ({id}, args, {models: {postModel}}, info) => {\n            return await postModel.find({author: id}).exec();\n        },\n        comment: async ({id}, args, {models: {commentModel}}, info) => {\n            return await commentModel.find({author: id}).exec();\n        },\n        profile_image: async (user, args, {models: {pictureModel}}, info) => {\n            const data = await pictureModel.findOne({author: user._id, _id: user.profile_image_url}).exec();\n            if (data) {\n                data.url = 'https://' + process.env.BUCKETNAME + '.s3.eu-central-1.amazonaws.com/users/avatars/' + data.key\n                return data\n            }\n            return null\n        },\n        followers: async (user, args, {models: {followModel}}, info) => {\n            return await followModel.find({follower: user._id}).exec()\n        },\n        following: async (user, args, {models: {followModel}}, info) => {\n            return await followModel.find({_id: user.following}).exec()\n        },\n        feed: async (user, args, {models: {followModel, postModel}, userInfo}, info) => {\n            let data = await followModel.find({_id: user.following}).exec()\n            let res = await postModel.find({author: userInfo._id}).sort({createdAt: -1})\n            if (data.length > 0) {\n                res = res.concat(await postModel.find({author: {$in: data[0].follower}}).sort({createdAt: -1}))\n            }\n            return res.sort((a, b) => a.createdAt > b.createdAt ? -1 : 1)\n        },\n    },\n};"],"file":"userResolvers.js"}