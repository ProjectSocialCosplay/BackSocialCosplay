{"version":3,"sources":["../../src/resolvers/userResolvers.js"],"names":["AuthenticationError","bcrypt","jwt","Query","user","parent","id","models","userModel","userInfo","info","findById","_id","exec","getAuthUser","login","email","password","findOne","matchPasswords","compareSync","token","genarateToken","searchUsers","searchQuery","find","$or","pseudo","RegExp","$ne","limit","Mutation","createUser","birthdate","create","updateUser","testUpdate","findOneAndUpdate","err","result","Error","User","posts","args","postModel","author","comment","commentModel","profile_image","pictureModel","data","profile_image_url","url","process","env","BUCKETNAME","key","followers","followModel","follower","following","feed","res","sort","createdAt","length","concat","$in","a","b"],"mappings":"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","file":"userResolvers.js","sourcesContent":["import {AuthenticationError} from 'apollo-server-express'\nimport bcrypt from \"bcrypt\"\nimport jwt from \"../utils/jwt\"\n\nexport default {\n    Query: {\n        user: async (parent, {id}, {models: {userModel}, userInfo}, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            return await userModel.findById({_id: id}).exec()\n        },\n        getAuthUser: async (parent, {id}, {models: {userModel}, userInfo}, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            return await userModel.findById({_id: userInfo._id}).exec()\n        },\n\n        login: async (parent, {email, password}, {models: {userModel}}, info) => {\n            const user = await userModel.findOne({email}).exec();\n            if (!user) {\n                throw new AuthenticationError('Invalid credentials');\n            }\n            const matchPasswords = bcrypt.compareSync(password, user.password);\n            if (!matchPasswords) {\n                throw new AuthenticationError('Invalid credentials');\n            }\n            /*\n            if(!user._isAccountVerified){\n                throw new AuthenticationError('Account not confirmed');\n            }*/\n            const token = jwt.genarateToken(user._id)\n            return {\n                token\n            };\n        },\n        searchUsers: async (parent, { searchQuery }, { models: {userModel},userInfo}) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            if (!searchQuery) {\n                return [];\n            }\n            return userModel.find({\n                $or: [{pseudo: new RegExp(searchQuery, 'i')}],\n                _id: {\n                    $ne: userInfo._id,\n                },\n            }).limit(50);\n        },\n    },\n    Mutation: {\n        createUser: async (parent, {pseudo, email, password, birthdate}, {models: {userModel}}, info) => {\n            return await userModel.create({pseudo, email, password, birthdate});\n        },\n        updateUser: async (parent, {pseudo, email, birthdate}, {models: {userModel}, userInfo}, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            let testUpdate = await userModel.findOneAndUpdate({_id: userInfo._id}, {\n                    pseudo: pseudo,\n                    email: email,\n                    birthdate: birthdate\n                },\n                (err, result) => {\n                    if (err) {\n                        throw new Error(\"User not updated\")\n                    } else {\n                        return (result)\n                    }\n                })\n            return testUpdate;\n        },\n    },\n    User: {\n        posts: async ({id}, args, {models: {postModel}}, info) => {\n            return await postModel.find({author: id}).exec();\n        },\n        comment: async ({id}, args, {models: {commentModel}}, info) => {\n            return await commentModel.find({author: id}).exec();\n        },\n        profile_image: async (user, args, {models: {pictureModel}}, info) => {\n            const data = await pictureModel.findOne({author: user._id, _id: user.profile_image_url}).exec();\n            if (data) {\n                data.url = 'https://' + process.env.BUCKETNAME + '.s3.eu-central-1.amazonaws.com/users/avatars/' + data.key\n                return data\n            }\n            return null\n        },\n        followers: async (user, args, {models: {followModel}}, info) => {\n            return await followModel.find({follower: user._id}).exec()\n        },\n        following: async (user, args, {models: {followModel}}, info) => {\n            return await followModel.find({_id: user.following}).exec()\n        },\n        feed: async (user, args, {models: {followModel, postModel}, userInfo}, info) => {\n            let data = await followModel.find({_id: user.following}).exec()\n            let res = await postModel.find({author: userInfo._id}).sort({createdAt: -1})\n            if (data.length > 0) {\n                res = res.concat(await postModel.find({author: {$in: data[0].follower}}).sort({createdAt: -1}))\n            }\n            return res.sort((a, b) => a.createdAt > b.createdAt ? -1 : 1)\n        },\n    },\n};"]}