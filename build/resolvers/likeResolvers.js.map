{"version":3,"sources":["../../src/resolvers/likeResolvers.js"],"names":["AuthenticationError","Mutation","createLike","parent","postId","models","likeModel","postModel","userModel","userInfo","info","like","author","_id","post","save","findOneAndUpdate","$push","likes","id","deleteLike","beforeDeleteLike","findOneAndRemove","$pull","Error","Like","arg","findOne","exec"],"mappings":"AAAA,SAAQA,mBAAR,QAAkC,uBAAlC;;AAEA,eAAe;;AAEXC,cAAU;AACNC,oBAAY,OAAOC,MAAP,EAAe,EAACC,MAAD,EAAf,EAAyB,EAAEC,QAAQ,EAAEC,SAAF,EAAaC,SAAb,EAAwBC,SAAxB,EAAV,EAAgDC,QAAhD,EAAzB,EAAoFC,IAApF,KAA6F;;AAErG,gBAAI,CAACD,QAAL,EAAe;AACX,sBAAM,IAAIT,mBAAJ,CAAwB,2BAAxB,CAAN;AACH;AACD,kBAAMW,OAAO,MAAM,IAAIL,SAAJ,CAAc,EAAEM,QAAQH,SAASI,GAAnB,EAAwBC,MAAMV,MAA9B,EAAd,EAAsDW,IAAtD,EAAnB;;AAEA;AACA,kBAAMR,UAAUS,gBAAV,CAA2B,EAAEH,KAAKT,MAAP,EAA3B,EAA4C,EAAEa,OAAO,EAAEC,OAAOP,KAAKQ,EAAd,EAAT,EAA5C,CAAN;;AAEA;AACA,kBAAMX,UAAUQ,gBAAV,CAA2B,EAAEH,KAAKJ,SAASI,GAAhB,EAA3B,EAAkD,EAAEI,OAAO,EAAEC,OAAOP,KAAKQ,EAAd,EAAT,EAAlD,CAAN;;AAEA,mBAAOR,IAAP;AACH,SAfK;;AAiBNS,oBAAY,OAAOjB,MAAP,EAAe,EAAEC,MAAF,EAAf,EAA2B,EAAEC,QAAQ,EAAEC,SAAF,EAAaC,SAAb,EAAwBC,SAAxB,EAAV,EAAgDC,QAAhD,EAA3B,EAAsFC,IAAtF,KAA+F;AACvG,gBAAI,CAACD,QAAL,EAAe;AACX,sBAAM,IAAIT,mBAAJ,CAAwB,2BAAxB,CAAN;AACH;AACD,kBAAMqB,mBAAoB,MAAMf,UAAUgB,gBAAV,CAA2B,EAACV,QAAOH,SAASI,GAAjB,EAAsBC,MAAKV,MAA3B,EAA3B,CAAhC;AACA,gBAAGiB,gBAAH,EAAoB;AAChB;AACA,sBAAMb,UAAUQ,gBAAV,CAA2B,EAAEH,KAAKQ,iBAAiBT,MAAxB,EAA3B,EAA6D,EAAEW,OAAO,EAAEL,OAAOG,iBAAiBF,EAA1B,EAAT,EAA7D,CAAN;AACA;AACA,sBAAMZ,UAAUS,gBAAV,CAA2B,EAAEH,KAAKQ,iBAAiBP,IAAxB,EAA3B,EAA2D,EAAES,OAAO,EAAEL,OAAOG,iBAAiBF,EAA1B,EAAT,EAA3D,CAAN;AACA,uBAAOE,gBAAP;AACH,aAND,MAMK;AACD,sBAAM,IAAIG,KAAJ,CAAW,uBAAX,CAAN;AACH;AACJ;AA/BK,KAFC;AAmCXC,UAAM;AACFb,gBAAQ,OAAOT,MAAP,EAAeuB,GAAf,EAAoB,EAACrB,QAAQ,EAACG,SAAD,EAAT,EAAsBC,QAAtB,EAApB,EAAqDC,IAArD,KAA8D;AAClE,mBAAO,MAAMF,UAAUmB,OAAV,CAAkB,EAACd,KAAKV,OAAOS,MAAb,EAAlB,EAAwCgB,IAAxC,EAAb;AACH,SAHC;AAIFd,cAAO,OAAOX,MAAP,EAAeuB,GAAf,EAAoB,EAACrB,QAAQ,EAACE,SAAD,EAAT,EAApB,EAA2CG,IAA3C,KAAoD;AACvD,mBAAO,MAAMH,UAAUoB,OAAV,CAAkB,EAACd,KAAKV,OAAOW,IAAb,EAAlB,EAAsCc,IAAtC,EAAb;AACH;AANC;AAnCK,CAAf","file":"likeResolvers.js","sourcesContent":["import {AuthenticationError} from 'apollo-server-express'\n\nexport default {\n\n    Mutation: {\n        createLike: async (parent, {postId}, { models: { likeModel, postModel, userModel } , userInfo}, info) => {\n\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            const like = await new likeModel({ author: userInfo._id, post: postId }).save();\n\n            // Push like to post collection\n            await postModel.findOneAndUpdate({ _id: postId }, { $push: { likes: like.id } })\n\n            // Push like to user collection\n            await userModel.findOneAndUpdate({ _id: userInfo._id }, { $push: { likes: like.id } });\n\n            return like;\n        },\n\n        deleteLike: async (parent, { postId }, { models: { likeModel, postModel, userModel } , userInfo}, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            const beforeDeleteLike =  await likeModel.findOneAndRemove({author:userInfo._id, post:postId});\n            if(beforeDeleteLike){\n                // Delete like from users collection\n                await userModel.findOneAndUpdate({ _id: beforeDeleteLike.author }, { $pull: { likes: beforeDeleteLike.id } });\n                // Delete like from posts collection\n                await postModel.findOneAndUpdate({ _id: beforeDeleteLike.post }, { $pull: { likes: beforeDeleteLike.id } });\n                return beforeDeleteLike\n            }else{\n                throw new Error( 'internal server error');\n            }\n        },\n    },\n    Like: {\n        author: async (parent, arg, {models: {userModel}, userInfo}, info) => {\n            return await userModel.findOne({_id: parent.author}).exec()\n        },\n        post : async (parent, arg, {models: {postModel}}, info) => {\n            return await postModel.findOne({_id: parent.post}).exec()\n        },\n    },\n};"]}