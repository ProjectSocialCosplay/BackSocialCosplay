{"version":3,"sources":["../../src/resolvers/commentResolvers.js"],"names":["Query","getComment","parent","info","id","commentModel","models","userInfo","AuthenticationError","find","_id","sort","updatedAt","exec","Mutation","createComment","root","comment","postId","postModel","author","post","data","create","findOneAndUpdate","$push","comments","e","console","log","Error","message","deleteComment","commentId","findByIdAndRemove","$pull","Comment","arg","userModel","findOne"],"mappings":"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","sourcesContent":["import {AuthenticationError} from 'apollo-server-express'\n\nexport default {\n    Query: {\n        getComment: async (parent, {id}, {models: {commentModel}, userInfo}, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            return await commentModel.find({_id: id}).sort({updatedAt: -1}).exec()\n        }\n    },\n    Mutation: {\n        createComment: async (root, {comment, postId}, {models: {postModel, commentModel}, userInfo}) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n\n            let author = userInfo._id\n            let post = postId;\n            let data = new commentModel({comment, post, author})\n            await commentModel.create(data)\n            await postModel.findOneAndUpdate({_id: postId}, {$push: {comments: data._id}}).catch((e) => {\n                console.log(e)\n                throw new Error(e.message)\n            })\n            return data\n        },\n\n        deleteComment: async (root, {commentId}, {models: {postModel, commentModel}, userInfo}) => {\n            const comment = await commentModel.findByIdAndRemove(commentId)\n\n            // Delete like from post collection\n            let data = await postModel.findOneAndUpdate({ _id: comment.post }, { $pull: { comments: commentId}});\n            return {message: 'Comment deleted.'};\n        },\n\n    },\n    Comment: {\n        author: async (parent, arg, {models: {userModel}, userInfo}, info) => {\n            return await userModel.findOne({_id: parent.author}).exec()\n        },\n        post: async (parent, arg, {models: {postModel}}, info) => {\n            return await postModel.findOne({_id: parent.post}).exec()\n        },\n    },\n};\n  "],"file":"commentResolvers.js"}