{"version":3,"sources":["../../src/resolvers/commentResolvers.js"],"names":["AuthenticationError","Query","getComment","parent","id","models","commentModel","userInfo","info","find","_id","sort","updatedAt","exec","Mutation","createComment","root","comment","postId","postModel","author","post","data","create","findOneAndUpdate","$push","comments","catch","e","console","log","Error","message","deleteComment","commentId","findByIdAndRemove","$pull","Comment","arg","userModel","findOne"],"mappings":"AAAA,SAAQA,mBAAR,QAAkC,uBAAlC;;AAEA,eAAe;AACXC,WAAO;AACHC,oBAAY,OAAOC,MAAP,EAAe,EAACC,EAAD,EAAf,EAAqB,EAACC,QAAQ,EAACC,YAAD,EAAT,EAAyBC,QAAzB,EAArB,EAAyDC,IAAzD,KAAkE;AAC1E,gBAAI,CAACD,QAAL,EAAe;AACX,sBAAM,IAAIP,mBAAJ,CAAwB,2BAAxB,CAAN;AACH;AACD,mBAAO,MAAMM,aAAaG,IAAb,CAAkB,EAACC,KAAKN,EAAN,EAAlB,EAA6BO,IAA7B,CAAkC,EAACC,WAAW,CAAC,CAAb,EAAlC,EAAmDC,IAAnD,EAAb;AACH;AANE,KADI;AASXC,cAAU;AACNC,uBAAe,OAAOC,IAAP,EAAa,EAACC,OAAD,EAAUC,MAAV,EAAb,EAAgC,EAACb,QAAQ,EAACc,SAAD,EAAYb,YAAZ,EAAT,EAAoCC,QAApC,EAAhC,KAAkF;AAC7F,gBAAI,CAACA,QAAL,EAAe;AACX,sBAAM,IAAIP,mBAAJ,CAAwB,2BAAxB,CAAN;AACH;;AAED,gBAAIoB,SAASb,SAASG,GAAtB;AACA,gBAAIW,OAAOH,MAAX;AACA,gBAAII,OAAO,IAAIhB,YAAJ,CAAiB,EAACW,OAAD,EAAUI,IAAV,EAAgBD,MAAhB,EAAjB,CAAX;AACA,kBAAMd,aAAaiB,MAAb,CAAoBD,IAApB,CAAN;AACA,kBAAMH,UAAUK,gBAAV,CAA2B,EAACd,KAAKQ,MAAN,EAA3B,EAA0C,EAACO,OAAO,EAACC,UAAUJ,KAAKZ,GAAhB,EAAR,EAA1C,EAAyEiB,KAAzE,CAAgFC,CAAD,IAAO;AACxFC,wBAAQC,GAAR,CAAYF,CAAZ;AACA,sBAAM,IAAIG,KAAJ,CAAUH,EAAEI,OAAZ,CAAN;AACH,aAHK,CAAN;AAIA,mBAAOV,IAAP;AACH,SAfK;;AAiBNW,uBAAe,OAAOjB,IAAP,EAAa,EAACkB,SAAD,EAAb,EAA0B,EAAC7B,QAAQ,EAACc,SAAD,EAAYb,YAAZ,EAAT,EAAoCC,QAApC,EAA1B,KAA4E;AACvF,kBAAMU,UAAU,MAAMX,aAAa6B,iBAAb,CAA+BD,SAA/B,CAAtB;;AAEA;AACA,gBAAIZ,OAAO,MAAMH,UAAUK,gBAAV,CAA2B,EAAEd,KAAKO,QAAQI,IAAf,EAA3B,EAAkD,EAAEe,OAAO,EAAEV,UAAUQ,SAAZ,EAAT,EAAlD,CAAjB;AACA,mBAAO,EAACF,SAAS,kBAAV,EAAP;AACH;;AAvBK,KATC;AAmCXK,aAAS;AACLjB,gBAAQ,OAAOjB,MAAP,EAAemC,GAAf,EAAoB,EAACjC,QAAQ,EAACkC,SAAD,EAAT,EAAsBhC,QAAtB,EAApB,EAAqDC,IAArD,KAA8D;AAClE,mBAAO,MAAM+B,UAAUC,OAAV,CAAkB,EAAC9B,KAAKP,OAAOiB,MAAb,EAAlB,EAAwCP,IAAxC,EAAb;AACH,SAHI;AAILQ,cAAM,OAAOlB,MAAP,EAAemC,GAAf,EAAoB,EAACjC,QAAQ,EAACc,SAAD,EAAT,EAApB,EAA2CX,IAA3C,KAAoD;AACtD,mBAAO,MAAMW,UAAUqB,OAAV,CAAkB,EAAC9B,KAAKP,OAAOkB,IAAb,EAAlB,EAAsCR,IAAtC,EAAb;AACH;AANI;AAnCE,CAAf","file":"commentResolvers.js","sourcesContent":["import {AuthenticationError} from 'apollo-server-express'\n\nexport default {\n    Query: {\n        getComment: async (parent, {id}, {models: {commentModel}, userInfo}, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            return await commentModel.find({_id: id}).sort({updatedAt: -1}).exec()\n        }\n    },\n    Mutation: {\n        createComment: async (root, {comment, postId}, {models: {postModel, commentModel}, userInfo}) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n\n            let author = userInfo._id\n            let post = postId;\n            let data = new commentModel({comment, post, author})\n            await commentModel.create(data)\n            await postModel.findOneAndUpdate({_id: postId}, {$push: {comments: data._id}}).catch((e) => {\n                console.log(e)\n                throw new Error(e.message)\n            })\n            return data\n        },\n\n        deleteComment: async (root, {commentId}, {models: {postModel, commentModel}, userInfo}) => {\n            const comment = await commentModel.findByIdAndRemove(commentId)\n\n            // Delete like from post collection\n            let data = await postModel.findOneAndUpdate({ _id: comment.post }, { $pull: { comments: commentId}});\n            return {message: 'Comment deleted.'};\n        },\n\n    },\n    Comment: {\n        author: async (parent, arg, {models: {userModel}, userInfo}, info) => {\n            return await userModel.findOne({_id: parent.author}).exec()\n        },\n        post: async (parent, arg, {models: {postModel}}, info) => {\n            return await postModel.findOne({_id: parent.post}).exec()\n        },\n    },\n};\n  "]}