{"version":3,"sources":["../../src/resolvers/postResolvers.js"],"names":["AuthenticationError","Query","getPost","parent","id","models","postModel","userInfo","info","find","_id","sort","updatedAt","exec","getAllPost","args","author","Mutation","createPost","content","userModel","newPost","save","create","findOneAndUpdate","$push","post","catch","e","Error","message","deletePost","Post","findById","comment","commentModel","likes","likeModel"],"mappings":"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","file":"postResolvers.js","sourcesContent":["import {AuthenticationError} from 'apollo-server-express'\n\nexport default {\n    Query: {\n        getPost: async (parent, { id }, { models: { postModel }, userInfo }, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            return await postModel.find({_id: id}).sort({updatedAt: -1}).exec()\n        },\n\n        getAllPost: async (parent, args, { models: { postModel }, userInfo }, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            return await postModel.find({author: userInfo._id}).sort({updatedAt: -1}).exec()\n        },\n    },\n    Mutation: {\n        createPost: async (parent, { content }, { models: { postModel, userModel }, userInfo }, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            const newPost = await new postModel({\n                content,\n                author: userInfo._id\n            }).save();\n\n            await postModel.create(newPost)\n            await userModel.findOneAndUpdate({ _id: userInfo._id }, { $push: { post: newPost._id }}).catch((e)=>{\n                throw new Error(e.message)\n            })\n            return newPost\n        },\n\n        deletePost: async (parent, { id }, { models: { postModel }, userInfo }, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            //Remove Image From Azure\n            //Remove  Post and post form users collection\n            //remove comments\n            //remove from user Collection\n            //remove like\n            // Find user notification in users collection and remove them\n        },\n    },\n\n    Post: {\n        author: async ({ author }, args, { models: { userModel }}, info) => {\n            return await userModel.findById({_id: author}).exec();\n        },\n        comment: async ({id}, args, {models: {commentModel}}, info) => {\n            return await commentModel.find({post: id}).sort({updatedAt: -1}).exec();\n        },\n        likes: async ({id}, args, {models: {likeModel}}, info) => {\n            return await likeModel.find({post: id}).sort({updatedAt: -1}).exec();\n        },\n    },\n};\n"]}