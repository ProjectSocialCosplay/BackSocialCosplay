{"version":3,"sources":["../../src/resolvers/postResolvers.js"],"names":["Query","getPost","parent","info","id","postModel","models","userInfo","AuthenticationError","find","_id","sort","updatedAt","exec","getAllPost","args","author","Mutation","createPost","content","userModel","save","newPost","create","findOneAndUpdate","$push","post","e","Error","message","deletePost","Post","findById","comment","commentModel","likes","likeModel"],"mappings":"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","sourcesContent":["import {AuthenticationError} from 'apollo-server-express'\n\nexport default {\n    Query: {\n        getPost: async (parent, { id }, { models: { postModel }, userInfo }, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            return await postModel.find({_id: id}).sort({updatedAt: -1}).exec()\n        },\n\n        getAllPost: async (parent, args, { models: { postModel }, userInfo }, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            return await postModel.find({author: userInfo._id}).sort({updatedAt: -1}).exec()\n        },\n    },\n    Mutation: {\n        createPost: async (parent, { content }, { models: { postModel, userModel }, userInfo }, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            const newPost = await new postModel({\n                content,\n                author: userInfo._id\n            }).save();\n\n            await postModel.create(newPost)\n            await userModel.findOneAndUpdate({ _id: userInfo._id }, { $push: { post: newPost._id }}).catch((e)=>{\n                throw new Error(e.message)\n            })\n            return newPost\n        },\n\n        deletePost: async (parent, { id }, { models: { postModel }, userInfo }, info) => {\n            if (!userInfo) {\n                throw new AuthenticationError('You are not authenticated');\n            }\n            //Remove Image From Azure\n            //Remove  Post and post form users collection\n            //remove comments\n            //remove from user Collection\n            //remove like\n            // Find user notification in users collection and remove them\n        },\n    },\n\n    Post: {\n        author: async ({ author }, args, { models: { userModel }}, info) => {\n            return await userModel.findById({_id: author}).exec();\n        },\n        comment: async ({id}, args, {models: {commentModel}}, info) => {\n            return await commentModel.find({post: id}).sort({updatedAt: -1}).exec();\n        },\n        likes: async ({id}, args, {models: {likeModel}}, info) => {\n            return await likeModel.find({post: id}).sort({updatedAt: -1}).exec();\n        },\n    },\n};\n"],"file":"postResolvers.js"}