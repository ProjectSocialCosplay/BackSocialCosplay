{"version":3,"sources":["../src/index.js"],"names":["dotenv","config","path","process","env","NODE_ENV","app","use","bodyParser","json","limit","extended","urlencoded","credentials","origin","DOMAINE_NAME","PORT","server","ApolloServer","typeDefs","schemas","resolvers","context","req","jwt","checkUser","userInfo","models","userModel","postModel","likeModel","pictureModel","commentModel","followModel","formatError","err","console","log","message","applyMiddleware","mongodbconfig","moogoseConnect","appServ","listen"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEAA,mBAAOC,MAAP,CAAc;AACVC,EAAAA,IAAI,mBAAYC,OAAO,CAACC,GAAR,CAAYC,QAAxB;AADM,CAAd;;AAIA,IAAMC,GAAG,GAAG,0BAAZ;AACAA,GAAG,CAACC,GAAJ,CAAQC,UAAU,CAACC,IAAX,CAAgB;AAACC,EAAAA,KAAK,EAAE,MAAR;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAAhB,CAAR;AACAL,GAAG,CAACC,GAAJ,CAAQC,UAAU,CAACI,UAAX,CAAsB;AAACF,EAAAA,KAAK,EAAE,MAAR;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAAtB,CAAR;AAEAL,GAAG,CAACC,GAAJ,CACI,sBAAK;AACDM,EAAAA,WAAW,EAAE,IADZ;AAEDC,EAAAA,MAAM,EACFX,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACMF,OAAO,CAACC,GAAR,CAAYW,YADlB,GAEM,sBAAsBZ,OAAO,CAACC,GAAR,CAAYY;AAL3C,CAAL,CADJ;AAUA,IAAMC,MAAM,GAAG,IAAIC,iCAAJ,CAAiB;AAC5BC,EAAAA,QAAQ,EAAEC,mBADkB;AAE5BC,EAAAA,SAAS,EAATA,qBAF4B;AAG5BC,EAAAA,OAAO;AAAA,iGAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,cAAAA,GAAR,QAAQA,GAAR;;AAAA,mBACDA,GADC;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEsBC,gBAAIC,SAAJ,CAAcF,GAAd,CAFtB;;AAAA;AAEKG,cAAAA,QAFL;AAAA,gDAGM;AACHA,gBAAAA,QAAQ,EAARA,QADG;AAEHC,gBAAAA,MAAM,EAAE;AACJC,kBAAAA,SAAS,EAATA,qBADI;AAEJC,kBAAAA,SAAS,EAATA,qBAFI;AAGJC,kBAAAA,SAAS,EAATA,qBAHI;AAIJC,kBAAAA,YAAY,EAAZA,wBAJI;AAKJC,kBAAAA,YAAY,EAAZA,wBALI;AAMJC,kBAAAA,WAAW,EAAXA;AANI,iBAFL;AAUHV,gBAAAA,GAAG,EAAHA;AAVG,eAHN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAHqB;AAoB5BW,EAAAA,WApB4B,uBAoBhBC,GApBgB,EAoBX;AACb,QAAIhC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACjC+B,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAS,IAAT,GAAgBF,GAAG,CAACG,OAAhC;AACH;;AACD,WAAO;AACH;AACAA,MAAAA,OAAO,EAAEH,GAAG,CAACG;AAFV,KAAP;AAIH;AA5B2B,CAAjB,CAAf;;AAgCArB,MAAM,CAACsB,eAAP,CAAuB;AAACjC,EAAAA,GAAG,EAAHA,GAAD;AAAMJ,EAAAA,IAAI,EAAE;AAAZ,CAAvB;;AAEAsC,eAAcC,cAAd;;AAEA,IAAMC,OAAO,GAAGpC,GAAG,CAACqC,MAAJ,CAAWxC,OAAO,CAACC,GAAR,CAAYY,IAAvB,EAA6B,YAAM;AAC3CoB,EAAAA,OAAO,CAACC,GAAR,4DAAsDlC,OAAO,CAACC,GAAR,CAAYY,IAAlE;AACP,CAFe,CAAhB","sourcesContent":["import dotenv from 'dotenv'\nimport cors from 'cors'\nimport express from 'express'\nimport {ApolloServer, ApolloError} from 'apollo-server-express'\nimport jwt from './utils/jwt';\nimport {uuid} from './utils/tools'\nimport mongodbconfig from './config/db'\nimport * as bodyParser from \"body-parser\";\n\nimport schemas from './schemas'\nimport resolvers from './resolvers'\n\nimport userModel from './models/userModel';\nimport postModel from './models/postModel';\nimport commentModel from './models/commentModel';\nimport likeModel from './models/likeModel';\nimport pictureModel from './models/pictureModel'\nimport followModel from \"./models/followModel\";\n\ndotenv.config({\n    path: `./.env.${process.env.NODE_ENV}`\n});\n\nconst app = express();\napp.use(bodyParser.json({limit: '10mb', extended: true}))\napp.use(bodyParser.urlencoded({limit: '10mb', extended: true}))\n\napp.use(\n    cors({\n        credentials: true,\n        origin:\n            process.env.NODE_ENV === \"production\"\n                ? process.env.DOMAINE_NAME\n                : \"http://localhost:\" + process.env.PORT,\n    })\n);\n\nconst server = new ApolloServer({\n    typeDefs: schemas,\n    resolvers,\n    context: async ({req}) => {\n        if (req) {\n            const userInfo = await jwt.checkUser(req)\n            return {\n                userInfo,\n                models: {\n                    userModel,\n                    postModel,\n                    likeModel,\n                    pictureModel,\n                    commentModel,\n                    followModel\n                },\n                req\n            };\n        }\n    },\n    formatError(err) {\n        if (process.env.NODE_ENV !== 'test') {\n            console.log(uuid() + \": \" + err.message)\n        }\n        return {\n            // ErrorEventId: uuid(),\n            message: err.message,\n        };\n    }\n\n});\n\nserver.applyMiddleware({app, path: '/graphql'});\n\nmongodbconfig.moogoseConnect()\n\nconst appServ = app.listen(process.env.PORT, () => {\n        console.log(`ðŸš€ App Launch Server listening on port ${process.env.PORT}`);\n});\n\nexport {\n    appServ,\n    server\n};"],"file":"index.js"}