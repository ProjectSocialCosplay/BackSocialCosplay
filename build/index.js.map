{"version":3,"sources":["../src/index.js"],"names":["dotenv","cors","express","ApolloServer","ApolloError","jwt","uuid","mongodbconfig","bodyParser","schemas","resolvers","userModel","postModel","commentModel","likeModel","pictureModel","followModel","config","path","process","env","NODE_ENV","app","use","json","limit","extended","urlencoded","credentials","origin","DOMAINE_NAME","PORT","server","typeDefs","context","req","userInfo","checkUser","models","formatError","err","console","log","message","applyMiddleware","moogoseConnect","appServ","listen"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAAQC,YAAR,EAAsBC,WAAtB,QAAwC,uBAAxC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAAQC,IAAR,QAAmB,eAAnB;AACA,OAAOC,aAAP,MAA0B,aAA1B;AACA,OAAO,KAAKC,UAAZ,MAA4B,aAA5B;;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;AAEAhB,OAAOiB,MAAP,CAAc;AACVC,UAAO,UAASC,QAAQC,GAAR,CAAYC,QAAS;AAD3B,CAAd;;AAIA,MAAMC,MAAMpB,SAAZ;AACAoB,IAAIC,GAAJ,CAAQf,WAAWgB,IAAX,CAAgB,EAACC,OAAO,MAAR,EAAgBC,UAAU,IAA1B,EAAhB,CAAR;AACAJ,IAAIC,GAAJ,CAAQf,WAAWmB,UAAX,CAAsB,EAACF,OAAO,MAAR,EAAgBC,UAAU,IAA1B,EAAtB,CAAR;;AAEAJ,IAAIC,GAAJ,CACItB,KAAK;AACD2B,iBAAa,IADZ;AAEDC,YACIV,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACMF,QAAQC,GAAR,CAAYU,YADlB,GAEM,sBAAsBX,QAAQC,GAAR,CAAYW;AAL3C,CAAL,CADJ;;AAUA,MAAMC,SAAS,IAAI7B,YAAJ,CAAiB;AAC5B8B,cAAUxB,OADkB;AAE5BC,aAF4B;AAG5BwB,aAAS,OAAO,EAACC,GAAD,EAAP,KAAiB;AACtB,YAAIA,GAAJ,EAAS;AACL,kBAAMC,WAAW,MAAM/B,IAAIgC,SAAJ,CAAcF,GAAd,CAAvB;AACA,mBAAO;AACHC,wBADG;AAEHE,wBAAQ;AACJ3B,6BADI;AAEJC,6BAFI;AAGJE,6BAHI;AAIJC,gCAJI;AAKJF,gCALI;AAMJG;AANI,iBAFL;AAUHmB;AAVG,aAAP;AAYH;AACJ,KAnB2B;AAoB5BI,gBAAYC,GAAZ,EAAiB;AACb,YAAIrB,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACjCoB,oBAAQC,GAAR,CAAYpC,SAAS,IAAT,GAAgBkC,IAAIG,OAAhC;AACH;AACD,eAAO;AACH;AACAA,qBAASH,IAAIG;AAFV,SAAP;AAIH;;AA5B2B,CAAjB,CAAf;;AAgCAX,OAAOY,eAAP,CAAuB,EAACtB,GAAD,EAAMJ,MAAM,UAAZ,EAAvB;;AAEAX,cAAcsC,cAAd;;AAEA,MAAMC,UAAUxB,IAAIyB,MAAJ,CAAW5B,QAAQC,GAAR,CAAYW,IAAvB,EAA6B,MAAM;AAC3CU,YAAQC,GAAR,CAAa,0CAAyCvB,QAAQC,GAAR,CAAYW,IAAK,EAAvE;AACP,CAFe,CAAhB;;AAIA,SACIe,OADJ,EAEId,MAFJ","file":"index.js","sourcesContent":["import dotenv from 'dotenv'\nimport cors from 'cors'\nimport express from 'express'\nimport {ApolloServer, ApolloError} from 'apollo-server-express'\nimport jwt from './utils/jwt';\nimport {uuid} from './utils/tools'\nimport mongodbconfig from './config/db'\nimport * as bodyParser from \"body-parser\";\n\nimport schemas from './schemas'\nimport resolvers from './resolvers'\n\nimport userModel from './models/userModel';\nimport postModel from './models/postModel';\nimport commentModel from './models/commentModel';\nimport likeModel from './models/likeModel';\nimport pictureModel from './models/pictureModel'\nimport followModel from \"./models/followModel\";\n\ndotenv.config({\n    path: `./.env.${process.env.NODE_ENV}`\n});\n\nconst app = express();\napp.use(bodyParser.json({limit: '10mb', extended: true}))\napp.use(bodyParser.urlencoded({limit: '10mb', extended: true}))\n\napp.use(\n    cors({\n        credentials: true,\n        origin:\n            process.env.NODE_ENV === \"production\"\n                ? process.env.DOMAINE_NAME\n                : \"http://localhost:\" + process.env.PORT,\n    })\n);\n\nconst server = new ApolloServer({\n    typeDefs: schemas,\n    resolvers,\n    context: async ({req}) => {\n        if (req) {\n            const userInfo = await jwt.checkUser(req)\n            return {\n                userInfo,\n                models: {\n                    userModel,\n                    postModel,\n                    likeModel,\n                    pictureModel,\n                    commentModel,\n                    followModel\n                },\n                req\n            };\n        }\n    },\n    formatError(err) {\n        if (process.env.NODE_ENV !== 'test') {\n            console.log(uuid() + \": \" + err.message)\n        }\n        return {\n            // ErrorEventId: uuid(),\n            message: err.message,\n        };\n    }\n\n});\n\nserver.applyMiddleware({app, path: '/graphql'});\n\nmongodbconfig.moogoseConnect()\n\nconst appServ = app.listen(process.env.PORT, () => {\n        console.log(`ðŸš€ App Launch Server listening on port ${process.env.PORT}`);\n});\n\nexport {\n    appServ,\n    server\n};"]}